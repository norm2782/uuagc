-- do not edit; automatically generated by UU.AG
module SemRules where

import qualified UU.DData.Map as Map
import UU.Pretty
import UU.DData.Set as Set
import UU.DData.Seq as Seq
import UU.DData.Map (Map)
import ConcreteSyntax
import AbstractSyntax
import Patterns
import ErrorMessages
import List (partition)
import Maybe
import UU.Scanner.Position(noPos)
import Options
import Rules
import Patterns

import UU.Scanner.Position(Pos)
import CommonTypes

import CommonTypes
import Patterns
import UU.Scanner.Position(Pos)
import Expression

type DefinedAttrs = Map (Name,Name) Bool -- defined with := or =
type FieldMap  = [(Name, Type)]

checkDef nt con owrt field attr fieldMap attributes defAttrs 
     | field == _LOC = checkDup
     | field == _LHS = check snd nt
     | otherwise     = case lookup field fieldMap of 
                         Just (NT tp) -> check fst tp
                         _              -> (True,defAttrs,Seq.single(UndefChild nt con field))        
  where check f nont | hasAttr f nont attr attributes = checkDup
                     | otherwise                      = (True,defAttrs,Seq.single(SuperfluousRule nt con field attr))
        checkDup = case Map.lookupIndex (field,attr) defAttrs of
                    Just ix -> let ((_,attr2),b) = Map.elemAt ix defAttrs
                               in if b 
                                    then (True,Map.insert (field,attr) owrt defAttrs, Seq.empty)
                                    else (True,defAttrs,Seq.single(DupRule nt con field attr2 attr))
                    Nothing -> (False,Map.insert (field,attr) owrt defAttrs, Seq.empty)

hasAttr f tp attr attributes = case Map.lookup tp attributes of
                                Just attrs -> Map.member attr (f attrs)
                                Nothing    -> False                               
-- Pattern -----------------------------------------------------
{-
   inherited attributes:
      attributes           : Map Nonterminal (Attributes, Attributes)
      con                  : Constructor
      fieldMap             : FieldMap
      nt                   : Nonterminal
      owrt                 : Bool

   chained attributes:
      defAttrs             : DefinedAttrs

   synthesised attributes:
      copy                 : SELF
      errors               : Seq Error
      stpos                : Pos

-}
{-
   local variables for Pattern.Alias:
      underscore
      defAttrs
      errs
      copy

-}
{-
   local variables for Pattern.Constr:
      copy

-}
{-
   local variables for Pattern.Product:
      copy

-}
{-
   local variables for Pattern.Underscore:
      copy

-}
-- semantic domain
newtype T_Pattern = T_Pattern ((Map Nonterminal (Attributes, Attributes)) ->
                               (Constructor) ->
                               (DefinedAttrs) ->
                               (FieldMap) ->
                               (Nonterminal) ->
                               (Bool) ->
                               ( (Pattern),(DefinedAttrs),(Seq Error),(Pos)))
-- cata
sem_Pattern :: (Pattern) ->
               (T_Pattern)
sem_Pattern ((Alias (_field) (_attr) (_pat))) =
    (sem_Pattern_Alias (_field) (_attr) ((sem_Pattern (_pat))))
sem_Pattern ((Constr (_name) (_pats))) =
    (sem_Pattern_Constr (_name) ((sem_Patterns (_pats))))
sem_Pattern ((Product (_pos) (_pats))) =
    (sem_Pattern_Product (_pos) ((sem_Patterns (_pats))))
sem_Pattern ((Underscore (_pos))) =
    (sem_Pattern_Underscore (_pos))
data Inh_Pattern = Inh_Pattern {attributes_Inh_Pattern :: Map Nonterminal (Attributes, Attributes),con_Inh_Pattern :: Constructor,defAttrs_Inh_Pattern :: DefinedAttrs,fieldMap_Inh_Pattern :: FieldMap,nt_Inh_Pattern :: Nonterminal,owrt_Inh_Pattern :: Bool}
data Syn_Pattern = Syn_Pattern {copy_Syn_Pattern :: Pattern,defAttrs_Syn_Pattern :: DefinedAttrs,errors_Syn_Pattern :: Seq Error,stpos_Syn_Pattern :: Pos}
wrap_Pattern :: (T_Pattern) ->
                (Inh_Pattern) ->
                (Syn_Pattern)
wrap_Pattern ((T_Pattern (sem))) ((Inh_Pattern (i1) (i2) (i3) (i4) (i5) (i6))) =
    let ( s1,s2,s3,s4) =
            (sem (i1) (i2) (i3) (i4) (i5) (i6))
    in  (Syn_Pattern (s1) (s2) (s3) (s4))
sem_Pattern_Alias :: (Name) ->
                     (Name) ->
                     (T_Pattern) ->
                     (T_Pattern)
sem_Pattern_Alias (field_) (attr_) ((T_Pattern (pat_))) =
    (T_Pattern (\ _lhsIattributes
                  _lhsIcon
                  _lhsIdefAttrs
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIowrt ->
                    let _lhsOcopy :: (Pattern)
                        _lhsOdefAttrs :: (DefinedAttrs)
                        _lhsOerrors :: (Seq Error)
                        _lhsOstpos :: (Pos)
                        _patIcopy :: (Pattern)
                        _patIdefAttrs :: (DefinedAttrs)
                        _patIerrors :: (Seq Error)
                        _patIstpos :: (Pos)
                        _patOattributes :: (Map Nonterminal (Attributes, Attributes))
                        _patOcon :: (Constructor)
                        _patOdefAttrs :: (DefinedAttrs)
                        _patOfieldMap :: (FieldMap)
                        _patOnt :: (Nonterminal)
                        _patOowrt :: (Bool)
                        ( _patIcopy,_patIdefAttrs,_patIerrors,_patIstpos) =
                            (pat_ (_patOattributes) (_patOcon) (_patOdefAttrs) (_patOfieldMap) (_patOnt) (_patOowrt))
                        -- "SemRules.ag"(line 67, column 16)
                        (_lhsOstpos@_) =
                            getPos field_
                        -- "SemRules.ag"(line 75, column 11)
                        (_lhsOerrors@_) =
                            _errs <> _patIerrors
                        -- "SemRules.ag"(line 74, column 11)
                        (_lhsOcopy@_) =
                            if _underscore then Underscore noPos else _copy
                        -- "SemRules.ag"(line 73, column 11)
                        (_patOdefAttrs@_) =
                            _lhsIdefAttrs
                        -- "SemRules.ag"(line 72, column 11)
                        (_lhsOdefAttrs@_) =
                            _defAttrs
                        -- "SemRules.ag"(line 71, column 15)
                        ((_underscore@_,_defAttrs@_,_errs@_)) =
                            checkDef _lhsInt _lhsIcon _lhsIowrt field_ attr_ _lhsIfieldMap _lhsIattributes _patIdefAttrs
                        -- self rule
                        (_copy@_) =
                            Alias field_ attr_ _patIcopy
                        -- copy rule (down)
                        (_patOattributes@_) =
                            _lhsIattributes
                        -- copy rule (down)
                        (_patOcon@_) =
                            _lhsIcon
                        -- copy rule (down)
                        (_patOfieldMap@_) =
                            _lhsIfieldMap
                        -- copy rule (down)
                        (_patOnt@_) =
                            _lhsInt
                        -- copy rule (down)
                        (_patOowrt@_) =
                            _lhsIowrt
                    in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors,_lhsOstpos)))
sem_Pattern_Constr :: (Constructor) ->
                      (T_Patterns) ->
                      (T_Pattern)
sem_Pattern_Constr (name_) ((T_Patterns (pats_))) =
    (T_Pattern (\ _lhsIattributes
                  _lhsIcon
                  _lhsIdefAttrs
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIowrt ->
                    let _lhsOcopy :: (Pattern)
                        _lhsOdefAttrs :: (DefinedAttrs)
                        _lhsOerrors :: (Seq Error)
                        _lhsOstpos :: (Pos)
                        _patsIcopy :: (Patterns)
                        _patsIdefAttrs :: (DefinedAttrs)
                        _patsIerrors :: (Seq Error)
                        _patsOattributes :: (Map Nonterminal (Attributes, Attributes))
                        _patsOcon :: (Constructor)
                        _patsOdefAttrs :: (DefinedAttrs)
                        _patsOfieldMap :: (FieldMap)
                        _patsOnt :: (Nonterminal)
                        _patsOowrt :: (Bool)
                        ( _patsIcopy,_patsIdefAttrs,_patsIerrors) =
                            (pats_ (_patsOattributes) (_patsOcon) (_patsOdefAttrs) (_patsOfieldMap) (_patsOnt) (_patsOowrt))
                        -- "SemRules.ag"(line 65, column 16)
                        (_lhsOstpos@_) =
                            getPos name_
                        -- use rule
                        (_lhsOerrors@_) =
                            _patsIerrors
                        -- self rule
                        (_copy@_) =
                            Constr name_ _patsIcopy
                        -- self rule
                        (_lhsOcopy@_) =
                            _copy
                        -- copy rule (up)
                        (_lhsOdefAttrs@_) =
                            _patsIdefAttrs
                        -- copy rule (down)
                        (_patsOattributes@_) =
                            _lhsIattributes
                        -- copy rule (down)
                        (_patsOcon@_) =
                            _lhsIcon
                        -- copy rule (down)
                        (_patsOdefAttrs@_) =
                            _lhsIdefAttrs
                        -- copy rule (down)
                        (_patsOfieldMap@_) =
                            _lhsIfieldMap
                        -- copy rule (down)
                        (_patsOnt@_) =
                            _lhsInt
                        -- copy rule (down)
                        (_patsOowrt@_) =
                            _lhsIowrt
                    in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors,_lhsOstpos)))
sem_Pattern_Product :: (Pos) ->
                       (T_Patterns) ->
                       (T_Pattern)
sem_Pattern_Product (pos_) ((T_Patterns (pats_))) =
    (T_Pattern (\ _lhsIattributes
                  _lhsIcon
                  _lhsIdefAttrs
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIowrt ->
                    let _lhsOcopy :: (Pattern)
                        _lhsOdefAttrs :: (DefinedAttrs)
                        _lhsOerrors :: (Seq Error)
                        _lhsOstpos :: (Pos)
                        _patsIcopy :: (Patterns)
                        _patsIdefAttrs :: (DefinedAttrs)
                        _patsIerrors :: (Seq Error)
                        _patsOattributes :: (Map Nonterminal (Attributes, Attributes))
                        _patsOcon :: (Constructor)
                        _patsOdefAttrs :: (DefinedAttrs)
                        _patsOfieldMap :: (FieldMap)
                        _patsOnt :: (Nonterminal)
                        _patsOowrt :: (Bool)
                        ( _patsIcopy,_patsIdefAttrs,_patsIerrors) =
                            (pats_ (_patsOattributes) (_patsOcon) (_patsOdefAttrs) (_patsOfieldMap) (_patsOnt) (_patsOowrt))
                        -- "SemRules.ag"(line 66, column 16)
                        (_lhsOstpos@_) =
                            pos_
                        -- use rule
                        (_lhsOerrors@_) =
                            _patsIerrors
                        -- self rule
                        (_copy@_) =
                            Product pos_ _patsIcopy
                        -- self rule
                        (_lhsOcopy@_) =
                            _copy
                        -- copy rule (up)
                        (_lhsOdefAttrs@_) =
                            _patsIdefAttrs
                        -- copy rule (down)
                        (_patsOattributes@_) =
                            _lhsIattributes
                        -- copy rule (down)
                        (_patsOcon@_) =
                            _lhsIcon
                        -- copy rule (down)
                        (_patsOdefAttrs@_) =
                            _lhsIdefAttrs
                        -- copy rule (down)
                        (_patsOfieldMap@_) =
                            _lhsIfieldMap
                        -- copy rule (down)
                        (_patsOnt@_) =
                            _lhsInt
                        -- copy rule (down)
                        (_patsOowrt@_) =
                            _lhsIowrt
                    in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors,_lhsOstpos)))
sem_Pattern_Underscore :: (Pos) ->
                          (T_Pattern)
sem_Pattern_Underscore (pos_) =
    (T_Pattern (\ _lhsIattributes
                  _lhsIcon
                  _lhsIdefAttrs
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIowrt ->
                    let _lhsOcopy :: (Pattern)
                        _lhsOdefAttrs :: (DefinedAttrs)
                        _lhsOerrors :: (Seq Error)
                        _lhsOstpos :: (Pos)
                        -- "SemRules.ag"(line 68, column 16)
                        (_lhsOstpos@_) =
                            pos_
                        -- use rule
                        (_lhsOerrors@_) =
                            Seq.empty
                        -- self rule
                        (_copy@_) =
                            Underscore pos_
                        -- self rule
                        (_lhsOcopy@_) =
                            _copy
                        -- copy rule (chain)
                        (_lhsOdefAttrs@_) =
                            _lhsIdefAttrs
                    in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors,_lhsOstpos)))
-- Patterns ----------------------------------------------------
{-
   inherited attributes:
      attributes           : Map Nonterminal (Attributes, Attributes)
      con                  : Constructor
      fieldMap             : FieldMap
      nt                   : Nonterminal
      owrt                 : Bool

   chained attributes:
      defAttrs             : DefinedAttrs

   synthesised attributes:
      copy                 : SELF
      errors               : Seq Error

-}
{-
   local variables for Patterns.Cons:
      copy

-}
{-
   local variables for Patterns.Nil:
      copy

-}
-- semantic domain
newtype T_Patterns = T_Patterns ((Map Nonterminal (Attributes, Attributes)) ->
                                 (Constructor) ->
                                 (DefinedAttrs) ->
                                 (FieldMap) ->
                                 (Nonterminal) ->
                                 (Bool) ->
                                 ( (Patterns),(DefinedAttrs),(Seq Error)))
-- cata
sem_Patterns :: (Patterns) ->
                (T_Patterns)
sem_Patterns (list) =
    (foldr (sem_Patterns_Cons) (sem_Patterns_Nil) ((map sem_Pattern list)))
data Inh_Patterns = Inh_Patterns {attributes_Inh_Patterns :: Map Nonterminal (Attributes, Attributes),con_Inh_Patterns :: Constructor,defAttrs_Inh_Patterns :: DefinedAttrs,fieldMap_Inh_Patterns :: FieldMap,nt_Inh_Patterns :: Nonterminal,owrt_Inh_Patterns :: Bool}
data Syn_Patterns = Syn_Patterns {copy_Syn_Patterns :: Patterns,defAttrs_Syn_Patterns :: DefinedAttrs,errors_Syn_Patterns :: Seq Error}
wrap_Patterns :: (T_Patterns) ->
                 (Inh_Patterns) ->
                 (Syn_Patterns)
wrap_Patterns ((T_Patterns (sem))) ((Inh_Patterns (i1) (i2) (i3) (i4) (i5) (i6))) =
    let ( s1,s2,s3) =
            (sem (i1) (i2) (i3) (i4) (i5) (i6))
    in  (Syn_Patterns (s1) (s2) (s3))
sem_Patterns_Cons :: (T_Pattern) ->
                     (T_Patterns) ->
                     (T_Patterns)
sem_Patterns_Cons ((T_Pattern (hd_))) ((T_Patterns (tl_))) =
    (T_Patterns (\ _lhsIattributes
                   _lhsIcon
                   _lhsIdefAttrs
                   _lhsIfieldMap
                   _lhsInt
                   _lhsIowrt ->
                     let _lhsOcopy :: (Patterns)
                         _lhsOdefAttrs :: (DefinedAttrs)
                         _lhsOerrors :: (Seq Error)
                         _hdIcopy :: (Pattern)
                         _hdIdefAttrs :: (DefinedAttrs)
                         _hdIerrors :: (Seq Error)
                         _hdIstpos :: (Pos)
                         _hdOattributes :: (Map Nonterminal (Attributes, Attributes))
                         _hdOcon :: (Constructor)
                         _hdOdefAttrs :: (DefinedAttrs)
                         _hdOfieldMap :: (FieldMap)
                         _hdOnt :: (Nonterminal)
                         _hdOowrt :: (Bool)
                         _tlIcopy :: (Patterns)
                         _tlIdefAttrs :: (DefinedAttrs)
                         _tlIerrors :: (Seq Error)
                         _tlOattributes :: (Map Nonterminal (Attributes, Attributes))
                         _tlOcon :: (Constructor)
                         _tlOdefAttrs :: (DefinedAttrs)
                         _tlOfieldMap :: (FieldMap)
                         _tlOnt :: (Nonterminal)
                         _tlOowrt :: (Bool)
                         ( _hdIcopy,_hdIdefAttrs,_hdIerrors,_hdIstpos) =
                             (hd_ (_hdOattributes) (_hdOcon) (_hdOdefAttrs) (_hdOfieldMap) (_hdOnt) (_hdOowrt))
                         ( _tlIcopy,_tlIdefAttrs,_tlIerrors) =
                             (tl_ (_tlOattributes) (_tlOcon) (_tlOdefAttrs) (_tlOfieldMap) (_tlOnt) (_tlOowrt))
                         -- "SemRules.ag"(line 80, column 10)
                         (_tlOdefAttrs@_) =
                             _lhsIdefAttrs
                         -- "SemRules.ag"(line 79, column 10)
                         (_hdOdefAttrs@_) =
                             _tlIdefAttrs
                         -- "SemRules.ag"(line 78, column 10)
                         (_lhsOdefAttrs@_) =
                             _hdIdefAttrs
                         -- use rule
                         (_lhsOerrors@_) =
                             _hdIerrors Seq.<> _tlIerrors
                         -- self rule
                         (_copy@_) =
                             (:) _hdIcopy _tlIcopy
                         -- self rule
                         (_lhsOcopy@_) =
                             _copy
                         -- copy rule (down)
                         (_hdOattributes@_) =
                             _lhsIattributes
                         -- copy rule (down)
                         (_hdOcon@_) =
                             _lhsIcon
                         -- copy rule (down)
                         (_hdOfieldMap@_) =
                             _lhsIfieldMap
                         -- copy rule (down)
                         (_hdOnt@_) =
                             _lhsInt
                         -- copy rule (down)
                         (_hdOowrt@_) =
                             _lhsIowrt
                         -- copy rule (down)
                         (_tlOattributes@_) =
                             _lhsIattributes
                         -- copy rule (down)
                         (_tlOcon@_) =
                             _lhsIcon
                         -- copy rule (down)
                         (_tlOfieldMap@_) =
                             _lhsIfieldMap
                         -- copy rule (down)
                         (_tlOnt@_) =
                             _lhsInt
                         -- copy rule (down)
                         (_tlOowrt@_) =
                             _lhsIowrt
                     in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors)))
sem_Patterns_Nil :: (T_Patterns)
sem_Patterns_Nil  =
    (T_Patterns (\ _lhsIattributes
                   _lhsIcon
                   _lhsIdefAttrs
                   _lhsIfieldMap
                   _lhsInt
                   _lhsIowrt ->
                     let _lhsOcopy :: (Patterns)
                         _lhsOdefAttrs :: (DefinedAttrs)
                         _lhsOerrors :: (Seq Error)
                         -- use rule
                         (_lhsOerrors@_) =
                             Seq.empty
                         -- self rule
                         (_copy@_) =
                             []
                         -- self rule
                         (_lhsOcopy@_) =
                             _copy
                         -- copy rule (chain)
                         (_lhsOdefAttrs@_) =
                             _lhsIdefAttrs
                     in  ( _lhsOcopy,_lhsOdefAttrs,_lhsOerrors)))
-- SemDef ------------------------------------------------------
{-
   inherited attributes:
      attributes           : Map Nonterminal (Attributes, Attributes)
      con                  : Constructor
      fieldMap             : FieldMap
      nt                   : Nonterminal

   chained attributes:
      rules                : (Rules,DefinedAttrs)

   synthesised attributes:
      errors               : Seq Error

-}
{-
   local variables for SemDef.Def:
      rules1
      defAttrs

-}
-- semantic domain
newtype T_SemDef = T_SemDef ((Map Nonterminal (Attributes, Attributes)) ->
                             (Constructor) ->
                             (FieldMap) ->
                             (Nonterminal) ->
                             ((Rules,DefinedAttrs)) ->
                             ( (Seq Error),((Rules,DefinedAttrs))))
-- cata
sem_SemDef :: (SemDef) ->
              (T_SemDef)
sem_SemDef ((Def (_pattern) (_rhs) (_owrt))) =
    (sem_SemDef_Def ((sem_Pattern (_pattern))) (_rhs) (_owrt))
data Inh_SemDef = Inh_SemDef {attributes_Inh_SemDef :: Map Nonterminal (Attributes, Attributes),con_Inh_SemDef :: Constructor,fieldMap_Inh_SemDef :: FieldMap,nt_Inh_SemDef :: Nonterminal,rules_Inh_SemDef :: (Rules,DefinedAttrs)}
data Syn_SemDef = Syn_SemDef {errors_Syn_SemDef :: Seq Error,rules_Syn_SemDef :: (Rules,DefinedAttrs)}
wrap_SemDef :: (T_SemDef) ->
               (Inh_SemDef) ->
               (Syn_SemDef)
wrap_SemDef ((T_SemDef (sem))) ((Inh_SemDef (i1) (i2) (i3) (i4) (i5))) =
    let ( s1,s2) =
            (sem (i1) (i2) (i3) (i4) (i5))
    in  (Syn_SemDef (s1) (s2))
sem_SemDef_Def :: (T_Pattern) ->
                  (Expression) ->
                  (Bool) ->
                  (T_SemDef)
sem_SemDef_Def ((T_Pattern (pattern_))) (rhs_) (owrt_) =
    (T_SemDef (\ _lhsIattributes
                 _lhsIcon
                 _lhsIfieldMap
                 _lhsInt
                 _lhsIrules ->
                   let _lhsOerrors :: (Seq Error)
                       _lhsOrules :: ((Rules,DefinedAttrs))
                       _patternIcopy :: (Pattern)
                       _patternIdefAttrs :: (DefinedAttrs)
                       _patternIerrors :: (Seq Error)
                       _patternIstpos :: (Pos)
                       _patternOattributes :: (Map Nonterminal (Attributes, Attributes))
                       _patternOcon :: (Constructor)
                       _patternOdefAttrs :: (DefinedAttrs)
                       _patternOfieldMap :: (FieldMap)
                       _patternOnt :: (Nonterminal)
                       _patternOowrt :: (Bool)
                       ( _patternIcopy,_patternIdefAttrs,_patternIerrors,_patternIstpos) =
                           (pattern_ (_patternOattributes) (_patternOcon) (_patternOdefAttrs) (_patternOfieldMap) (_patternOnt) (_patternOowrt))
                       -- "SemRules.ag"(line 60, column 9)
                       (_patternOowrt@_) =
                           owrt_
                       -- "SemRules.ag"(line 59, column 9)
                       (_lhsOrules@_) =
                           (Rule _patternIcopy rhs_ owrt_ (show _patternIstpos): _rules1, _patternIdefAttrs)
                       -- "SemRules.ag"(line 58, column 13)
                       ((_rules1@_,_defAttrs@_)) =
                           _lhsIrules
                       -- use rule
                       (_lhsOerrors@_) =
                           _patternIerrors
                       -- copy rule (down)
                       (_patternOattributes@_) =
                           _lhsIattributes
                       -- copy rule (down)
                       (_patternOcon@_) =
                           _lhsIcon
                       -- copy rule (from local)
                       (_patternOdefAttrs@_) =
                           _defAttrs
                       -- copy rule (down)
                       (_patternOfieldMap@_) =
                           _lhsIfieldMap
                       -- copy rule (down)
                       (_patternOnt@_) =
                           _lhsInt
                   in  ( _lhsOerrors,_lhsOrules)))
-- SemDefs -----------------------------------------------------
{-
   inherited attributes:
      attributes           : Map Nonterminal (Attributes, Attributes)
      con                  : Constructor
      fieldMap             : FieldMap
      nt                   : Nonterminal

   chained attributes:
      rules                : (Rules,DefinedAttrs)

   synthesised attributes:
      errors               : Seq Error

-}
{-
   local variables for SemDefs.Cons:

-}
{-
   local variables for SemDefs.Nil:

-}
-- semantic domain
newtype T_SemDefs = T_SemDefs ((Map Nonterminal (Attributes, Attributes)) ->
                               (Constructor) ->
                               (FieldMap) ->
                               (Nonterminal) ->
                               ((Rules,DefinedAttrs)) ->
                               ( (Seq Error),((Rules,DefinedAttrs))))
-- cata
sem_SemDefs :: (SemDefs) ->
               (T_SemDefs)
sem_SemDefs (list) =
    (foldr (sem_SemDefs_Cons) (sem_SemDefs_Nil) ((map sem_SemDef list)))
data Inh_SemDefs = Inh_SemDefs {attributes_Inh_SemDefs :: Map Nonterminal (Attributes, Attributes),con_Inh_SemDefs :: Constructor,fieldMap_Inh_SemDefs :: FieldMap,nt_Inh_SemDefs :: Nonterminal,rules_Inh_SemDefs :: (Rules,DefinedAttrs)}
data Syn_SemDefs = Syn_SemDefs {errors_Syn_SemDefs :: Seq Error,rules_Syn_SemDefs :: (Rules,DefinedAttrs)}
wrap_SemDefs :: (T_SemDefs) ->
                (Inh_SemDefs) ->
                (Syn_SemDefs)
wrap_SemDefs ((T_SemDefs (sem))) ((Inh_SemDefs (i1) (i2) (i3) (i4) (i5))) =
    let ( s1,s2) =
            (sem (i1) (i2) (i3) (i4) (i5))
    in  (Syn_SemDefs (s1) (s2))
sem_SemDefs_Cons :: (T_SemDef) ->
                    (T_SemDefs) ->
                    (T_SemDefs)
sem_SemDefs_Cons ((T_SemDef (hd_))) ((T_SemDefs (tl_))) =
    (T_SemDefs (\ _lhsIattributes
                  _lhsIcon
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIrules ->
                    let _lhsOerrors :: (Seq Error)
                        _lhsOrules :: ((Rules,DefinedAttrs))
                        _hdIerrors :: (Seq Error)
                        _hdIrules :: ((Rules,DefinedAttrs))
                        _hdOattributes :: (Map Nonterminal (Attributes, Attributes))
                        _hdOcon :: (Constructor)
                        _hdOfieldMap :: (FieldMap)
                        _hdOnt :: (Nonterminal)
                        _hdOrules :: ((Rules,DefinedAttrs))
                        _tlIerrors :: (Seq Error)
                        _tlIrules :: ((Rules,DefinedAttrs))
                        _tlOattributes :: (Map Nonterminal (Attributes, Attributes))
                        _tlOcon :: (Constructor)
                        _tlOfieldMap :: (FieldMap)
                        _tlOnt :: (Nonterminal)
                        _tlOrules :: ((Rules,DefinedAttrs))
                        ( _hdIerrors,_hdIrules) =
                            (hd_ (_hdOattributes) (_hdOcon) (_hdOfieldMap) (_hdOnt) (_hdOrules))
                        ( _tlIerrors,_tlIrules) =
                            (tl_ (_tlOattributes) (_tlOcon) (_tlOfieldMap) (_tlOnt) (_tlOrules))
                        -- use rule
                        (_lhsOerrors@_) =
                            _hdIerrors Seq.<> _tlIerrors
                        -- copy rule (up)
                        (_lhsOrules@_) =
                            _tlIrules
                        -- copy rule (down)
                        (_hdOattributes@_) =
                            _lhsIattributes
                        -- copy rule (down)
                        (_hdOcon@_) =
                            _lhsIcon
                        -- copy rule (down)
                        (_hdOfieldMap@_) =
                            _lhsIfieldMap
                        -- copy rule (down)
                        (_hdOnt@_) =
                            _lhsInt
                        -- copy rule (down)
                        (_hdOrules@_) =
                            _lhsIrules
                        -- copy rule (down)
                        (_tlOattributes@_) =
                            _lhsIattributes
                        -- copy rule (down)
                        (_tlOcon@_) =
                            _lhsIcon
                        -- copy rule (down)
                        (_tlOfieldMap@_) =
                            _lhsIfieldMap
                        -- copy rule (down)
                        (_tlOnt@_) =
                            _lhsInt
                        -- copy rule (chain)
                        (_tlOrules@_) =
                            _hdIrules
                    in  ( _lhsOerrors,_lhsOrules)))
sem_SemDefs_Nil :: (T_SemDefs)
sem_SemDefs_Nil  =
    (T_SemDefs (\ _lhsIattributes
                  _lhsIcon
                  _lhsIfieldMap
                  _lhsInt
                  _lhsIrules ->
                    let _lhsOerrors :: (Seq Error)
                        _lhsOrules :: ((Rules,DefinedAttrs))
                        -- use rule
                        (_lhsOerrors@_) =
                            Seq.empty
                        -- copy rule (chain)
                        (_lhsOrules@_) =
                            _lhsIrules
                    in  ( _lhsOerrors,_lhsOrules)))


