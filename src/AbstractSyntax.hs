-- do not edit; automatically generated by UU.AG
module AbstractSyntax where

import CommonTypes
import UU.Pretty
import Patterns
import Expression
import UU.DData.Set(Set)
-- Alternative -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Alternative.Alternative:

-}
data Alternative = Alternative (Constructor) (Children) (Rules)
-- Alternatives ------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Alternatives.Cons:

-}
{-
   local variables for Alternatives.Nil:

-}
type Alternatives = [(Alternative)]
-- Child -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Child.Child:

-}
data Child = Child (Name) (Type) (Attributes) (Attributes)
-- Children ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Children.Cons:

-}
{-
   local variables for Children.Nil:

-}
type Children = [(Child)]
-- Grammar -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Grammar.Grammar:

-}
data Grammar = Grammar (TypeSyns) (UseMap) (Derivings) (Set Nonterminal) (Productions)
-- Production --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Production.Production:

-}
data Production = Production (Nonterminal) (Attributes) (Attributes) (Alternatives)
-- Productions -------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Productions.Cons:

-}
{-
   local variables for Productions.Nil:

-}
type Productions = [(Production)]
-- Rule --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Rule.Rule:

-}
data Rule = Rule (Pattern) (Expression) (Bool) (String)
-- Rules -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Rules.Cons:

-}
{-
   local variables for Rules.Nil:

-}
type Rules = [(Rule)]


