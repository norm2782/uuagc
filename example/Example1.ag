-- UUAGC Example 1: Calculate the sum of a tree of integers
--
-- first preprocess with:   uuagc -dcf Example1.ag
-- then compile with:       ghc Example1.hs
-- finally run with:        ./main


-- With a DATA declaration we define the syntax of our datatype.
-- A DATA declaration is quite similar to a Haskall data declaration, but:
-- * each field has a name
-- * all alternatives are preceded with a "|" (even the first one)

DATA Tree
   | Node  left:  Tree   right: Tree
   | Tip   value: Int

-- With an ATTR declaration we specify attributes, that is the values 
-- we want to calculate in our tree walk.
-- The [...|...|...] construct is a three-place delimiter
-- (for top-down, threaded, and bottom-up attributes, respectively)
-- of which we currently use the third part only.

ATTR Tree [
          |
          | sum: Int
          ]

-- With a SEM declaration we specify the semantics.
-- For each constructor we have an assignment that states how the
-- sum for the left hand side (lhs) can be calculated from the fields
-- and/or the attributes of the right hand side.
-- A field can be referred to by an @ and the field name (as in @value),
-- an attribute by selecting from a field with a "dot" notation (as in @left.sum).
-- These items can be combined by any Haskell expression (in this case just a + ).

SEM Tree
  | Node  lhs.sum  =  @left.sum + @right.sum
  | Tip   lhs.sum  =  @value

-- The main program as well as some test data are written in Haskell.
-- It is written here enclosed in braces, as text in braces is
-- not touched by the preprocessor and passed unchanged to the Haskell compiler.

{
main :: IO ()
main = print (show test)

-- We can define an example tree structure by using the type Tree 
-- and the constructors Node and Tip introduced by the DATA declaration.
testTree :: Tree
testTree = Node (Tip 1) (Node (Tip 2) (Tip 3))

-- A function sem_Tree is generated by the preprocessor.
-- It can be used to determine the semantics of our example structure.
test :: Int
test = sem_Tree testTree
}
-- output of the program will be "6"
