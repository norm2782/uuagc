-- UUAGC Example 4: Multiple datatypes, the SELF pseudotype, auto-generated rules
--
-- first preprocess with:   uuagc -dcfsw Example4.ag
-- then compile with:       ghc Example4.hs
-- finally run with:        ./main

-- In the presence of recursive datatypes, it is quite common to
-- have a non-recursive wrapper type. Here, type "Root" plays that role.

DATA Root
   | Root  tree: Tree

DATA Tree
   | Node  left:  Tree   right: Tree
   | Tip   value: Int

DERIVING Root Tree: Show

-- We can declare attributes for multiple datatypes in a single declaration.
-- Here we do so for the synthesized attribute "transformed".
-- For this particular attribute there would be a problem, because
-- a transformed Root has type "Root", and a transformed Tree has type "Tree".
-- But we can summarize that by using the pseudotype "SELF", and still
-- declare the attribute "transformed" in a single declaration.

ATTR Root Tree [ | | transformed: SELF ]

ATTR Tree      [ replacement: Int | |  ]

-- An additional effect of using the pseudotype SELF is that semantic rules
-- are defined implicitly, that as a default generate a copy of the datastructure.
-- So we don't have to specify explicitly that a transformed Node consists of
-- the Node constructor applied to the transformed versions of its children,
-- and that a transformed Root is Root re-applied to the transformed version of its content tree.

-- The only semantic rule we *do* need to write, is where we disagree with the
-- default behaviour: at a Tip, we don't want a copy, but insert the replacement value.

SEM Tree
  | Tip   lhs.transformed = Tip @lhs.replacement

-- The non-recursive wrapper type Root is a good place to initialize
-- inherited attributes.
  
SEM Root
  | Root  tree.replacement = 37

-- Another rule that you might expect here is:
-- SEM Tree
--   | Node  left.replacement  = @lhs.replacement
--           right.replacement = @lhs.replacement
-- This is not needed though, because rules that copy inherited attributes
-- unchanged to the children are inserted automatically when nothing other is specified.
-- This defaulting mechanism is known as (one of the forms of) the "copy rule".

{
main :: IO ()
main = print (show result)

testTree :: Tree
testTree = Node (Tip 1) (Node (Tip 2) (Tip 3))

testRoot :: Root
testRoot = Root testTree

test :: T_Root
test = sem_Root testRoot

-- As the replacement value (37) is now defined internally at the Root level,
-- we do not need to pass any inherited attributes when starting the 
-- tree walk by calling wrap_Root.

result :: Root
result = transformed_Syn_Root (wrap_Root test Inh_Root)
}
-- output of the program will be "Root (Node (Tip 37) (Node (Tip 37) (Tip 37)))"
