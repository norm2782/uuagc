-- do not edit; automatically generated by UU.AG
module PrintCode where

import UU.Pretty
import Code

import UU.Pretty


ppTuple True  pps = "(" >|< pp_block " " (replicate (length pps `max` 1) ')') ",(" pps
ppTuple False pps = "(" >|< pp_block " " ")" "," pps


type PP_Docs = [PP_Doc]
-- DataAlt -----------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for DataAlt.DataAlt:

-}
{-
   local variables for DataAlt.Record:

-}
-- semantic domain
newtype T_DataAlt = T_DataAlt ((Bool) ->
                               ( (PP_Doc)))
-- cata
sem_DataAlt :: (DataAlt) ->
               (T_DataAlt)
sem_DataAlt ((DataAlt (_name) (_args))) =
    (sem_DataAlt_DataAlt (_name) (_args))
sem_DataAlt ((Record (_name) (_args))) =
    (sem_DataAlt_Record (_name) (_args))
data Inh_DataAlt = Inh_DataAlt {nest_Inh_DataAlt :: Bool}
data Syn_DataAlt = Syn_DataAlt {pp_Syn_DataAlt :: PP_Doc}
wrap_DataAlt :: (T_DataAlt) ->
                (Inh_DataAlt) ->
                (Syn_DataAlt)
wrap_DataAlt ((T_DataAlt (sem))) ((Inh_DataAlt (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_DataAlt (s1))
sem_DataAlt_DataAlt :: (String) ->
                       ([String]) ->
                       (T_DataAlt)
sem_DataAlt_DataAlt (name_) (args_) =
    (T_DataAlt (\ _lhsInest ->
                    let _lhsOpp :: (PP_Doc)
                        -- "PrintCode.ag"(line 79, column 16)
                        (_lhsOpp@_) =
                            name_ >#< hv_sp (map (pp_parens.text) args_)
                    in  ( _lhsOpp)))
sem_DataAlt_Record :: (String) ->
                      ([(String,String)]) ->
                      (T_DataAlt)
sem_DataAlt_Record (name_) (args_) =
    (T_DataAlt (\ _lhsInest ->
                    let _lhsOpp :: (PP_Doc)
                        -- "PrintCode.ag"(line 80, column 16)
                        (_lhsOpp@_) =
                            name_ >#< pp_block "{" "}" ","
                                               [ f >#< "::" >#< t | (f,t) <- args_ ]
                    in  ( _lhsOpp)))
-- DataAlts ----------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pps                  : [PP_Doc]

-}
{-
   local variables for DataAlts.Cons:

-}
{-
   local variables for DataAlts.Nil:

-}
-- semantic domain
newtype T_DataAlts = T_DataAlts ((Bool) ->
                                 ( ([PP_Doc])))
-- cata
sem_DataAlts :: (DataAlts) ->
                (T_DataAlts)
sem_DataAlts (list) =
    (foldr (sem_DataAlts_Cons) (sem_DataAlts_Nil) ((map sem_DataAlt list)))
data Inh_DataAlts = Inh_DataAlts {nest_Inh_DataAlts :: Bool}
data Syn_DataAlts = Syn_DataAlts {pps_Syn_DataAlts :: [PP_Doc]}
wrap_DataAlts :: (T_DataAlts) ->
                 (Inh_DataAlts) ->
                 (Syn_DataAlts)
wrap_DataAlts ((T_DataAlts (sem))) ((Inh_DataAlts (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_DataAlts (s1))
sem_DataAlts_Cons :: (T_DataAlt) ->
                     (T_DataAlts) ->
                     (T_DataAlts)
sem_DataAlts_Cons ((T_DataAlt (hd_))) ((T_DataAlts (tl_))) =
    (T_DataAlts (\ _lhsInest ->
                     let _lhsOpps :: ([PP_Doc])
                         _hdIpp :: (PP_Doc)
                         _hdOnest :: (Bool)
                         _tlIpps :: ([PP_Doc])
                         _tlOnest :: (Bool)
                         ( _hdIpp) =
                             (hd_ (_hdOnest))
                         ( _tlIpps) =
                             (tl_ (_tlOnest))
                         -- "PrintCode.ag"(line 29, column 10)
                         (_lhsOpps@_) =
                             _hdIpp : _tlIpps
                         -- copy rule (down)
                         (_hdOnest@_) =
                             _lhsInest
                         -- copy rule (down)
                         (_tlOnest@_) =
                             _lhsInest
                     in  ( _lhsOpps)))
sem_DataAlts_Nil :: (T_DataAlts)
sem_DataAlts_Nil  =
    (T_DataAlts (\ _lhsInest ->
                     let _lhsOpps :: ([PP_Doc])
                         -- "PrintCode.ag"(line 30, column 10)
                         (_lhsOpps@_) =
                             []
                     in  ( _lhsOpps)))
-- Decl --------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for Decl.Comment:

-}
{-
   local variables for Decl.Data:

-}
{-
   local variables for Decl.Decl:

-}
{-
   local variables for Decl.NewType:

-}
{-
   local variables for Decl.TSig:

-}
{-
   local variables for Decl.Type:

-}
-- semantic domain
newtype T_Decl = T_Decl ((Bool) ->
                         ( (PP_Doc)))
-- cata
sem_Decl :: (Decl) ->
            (T_Decl)
sem_Decl ((Comment (_txt))) =
    (sem_Decl_Comment (_txt))
sem_Decl ((Data (_name) (_alts) (_derivings))) =
    (sem_Decl_Data (_name) ((sem_DataAlts (_alts))) (_derivings))
sem_Decl ((Decl (_left) (_rhs))) =
    (sem_Decl_Decl ((sem_Lhs (_left))) ((sem_Expr (_rhs))))
sem_Decl ((NewType (_name) (_con) (_tp))) =
    (sem_Decl_NewType (_name) (_con) ((sem_Type (_tp))))
sem_Decl ((TSig (_name) (_tp))) =
    (sem_Decl_TSig (_name) ((sem_Type (_tp))))
sem_Decl ((Type (_name) (_tp))) =
    (sem_Decl_Type (_name) ((sem_Type (_tp))))
data Inh_Decl = Inh_Decl {nest_Inh_Decl :: Bool}
data Syn_Decl = Syn_Decl {pp_Syn_Decl :: PP_Doc}
wrap_Decl :: (T_Decl) ->
             (Inh_Decl) ->
             (Syn_Decl)
wrap_Decl ((T_Decl (sem))) ((Inh_Decl (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Decl (s1))
sem_Decl_Comment :: (String) ->
                    (T_Decl)
sem_Decl_Comment (txt_) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     -- "PrintCode.ag"(line 62, column 16)
                     (_lhsOpp@_) =
                         if '\n' `elem` txt_
                           then "{-" >-< vlist (lines txt_) >-< "-}"
                           else "--" >#< txt_
                 in  ( _lhsOpp)))
sem_Decl_Data :: (String) ->
                 (T_DataAlts) ->
                 ([String]) ->
                 (T_Decl)
sem_Decl_Data (name_) ((T_DataAlts (alts_))) (derivings_) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _altsIpps :: ([PP_Doc])
                     _altsOnest :: (Bool)
                     ( _altsIpps) =
                         (alts_ (_altsOnest))
                     -- "PrintCode.ag"(line 48, column 16)
                     (_lhsOpp@_) =
                         "data" >#< name_
                         >#<  ( case _altsIpps of
                                      [] -> empty
                                      (x:xs) ->              "=" >#<  x
                                             >-< vlist (map ("|" >#<) xs)
                                 >-< if null derivings_
                                        then empty
                                        else "deriving" >#< ppTuple False (map text derivings_)
                              )
                     -- copy rule (down)
                     (_altsOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Decl_Decl :: (T_Lhs) ->
                 (T_Expr) ->
                 (T_Decl)
sem_Decl_Decl ((T_Lhs (left_))) ((T_Expr (rhs_))) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _leftIpp :: (PP_Doc)
                     _leftOnest :: (Bool)
                     _rhsIpp :: (PP_Doc)
                     _rhsOnest :: (Bool)
                     ( _leftIpp) =
                         (left_ (_leftOnest))
                     ( _rhsIpp) =
                         (rhs_ (_rhsOnest))
                     -- "PrintCode.ag"(line 46, column 16)
                     (_lhsOpp@_) =
                         _leftIpp >#< "="
                         >-< indent 4 _rhsIpp
                     -- copy rule (down)
                     (_leftOnest@_) =
                         _lhsInest
                     -- copy rule (down)
                     (_rhsOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Decl_NewType :: (String) ->
                    (String) ->
                    (T_Type) ->
                    (T_Decl)
sem_Decl_NewType (name_) (con_) ((T_Type (tp_))) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _tpIpp :: (PP_Doc)
                     _tpIprec :: (Int)
                     _tpOnest :: (Bool)
                     ( _tpIpp,_tpIprec) =
                         (tp_ (_tpOnest))
                     -- "PrintCode.ag"(line 59, column 16)
                     (_lhsOpp@_) =
                         "newtype" >#< name_ >#< "=" >#< con_ >#< pp_parens _tpIpp
                     -- copy rule (down)
                     (_tpOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Decl_TSig :: (String) ->
                 (T_Type) ->
                 (T_Decl)
sem_Decl_TSig (name_) ((T_Type (tp_))) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _tpIpp :: (PP_Doc)
                     _tpIprec :: (Int)
                     _tpOnest :: (Bool)
                     ( _tpIpp,_tpIprec) =
                         (tp_ (_tpOnest))
                     -- "PrintCode.ag"(line 61, column 16)
                     (_lhsOpp@_) =
                         name_ >#< "::" >#< _tpIpp
                     -- copy rule (down)
                     (_tpOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Decl_Type :: (String) ->
                 (T_Type) ->
                 (T_Decl)
sem_Decl_Type (name_) ((T_Type (tp_))) =
    (T_Decl (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _tpIpp :: (PP_Doc)
                     _tpIprec :: (Int)
                     _tpOnest :: (Bool)
                     ( _tpIpp,_tpIprec) =
                         (tp_ (_tpOnest))
                     -- "PrintCode.ag"(line 60, column 16)
                     (_lhsOpp@_) =
                         "type" >#< name_ >#< "=" >#<  _tpIpp
                     -- copy rule (down)
                     (_tpOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
-- Decls -------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pps                  : [PP_Doc]

-}
{-
   local variables for Decls.Cons:

-}
{-
   local variables for Decls.Nil:

-}
-- semantic domain
newtype T_Decls = T_Decls ((Bool) ->
                           ( ([PP_Doc])))
-- cata
sem_Decls :: (Decls) ->
             (T_Decls)
sem_Decls (list) =
    (foldr (sem_Decls_Cons) (sem_Decls_Nil) ((map sem_Decl list)))
data Inh_Decls = Inh_Decls {nest_Inh_Decls :: Bool}
data Syn_Decls = Syn_Decls {pps_Syn_Decls :: [PP_Doc]}
wrap_Decls :: (T_Decls) ->
              (Inh_Decls) ->
              (Syn_Decls)
wrap_Decls ((T_Decls (sem))) ((Inh_Decls (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Decls (s1))
sem_Decls_Cons :: (T_Decl) ->
                  (T_Decls) ->
                  (T_Decls)
sem_Decls_Cons ((T_Decl (hd_))) ((T_Decls (tl_))) =
    (T_Decls (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      _hdIpp :: (PP_Doc)
                      _hdOnest :: (Bool)
                      _tlIpps :: ([PP_Doc])
                      _tlOnest :: (Bool)
                      ( _hdIpp) =
                          (hd_ (_hdOnest))
                      ( _tlIpps) =
                          (tl_ (_tlOnest))
                      -- "PrintCode.ag"(line 37, column 10)
                      (_lhsOpps@_) =
                          _hdIpp : _tlIpps
                      -- copy rule (down)
                      (_hdOnest@_) =
                          _lhsInest
                      -- copy rule (down)
                      (_tlOnest@_) =
                          _lhsInest
                  in  ( _lhsOpps)))
sem_Decls_Nil :: (T_Decls)
sem_Decls_Nil  =
    (T_Decls (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      -- "PrintCode.ag"(line 38, column 10)
                      (_lhsOpps@_) =
                          []
                  in  ( _lhsOpps)))
-- Expr --------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for Expr.App:

-}
{-
   local variables for Expr.Lambda:

-}
{-
   local variables for Expr.Let:

-}
{-
   local variables for Expr.PP:

-}
{-
   local variables for Expr.SimpleExpr:

-}
{-
   local variables for Expr.TupleExpr:

-}
-- semantic domain
newtype T_Expr = T_Expr ((Bool) ->
                         ( (PP_Doc)))
-- cata
sem_Expr :: (Expr) ->
            (T_Expr)
sem_Expr ((App (_name) (_args))) =
    (sem_Expr_App (_name) ((sem_Exprs (_args))))
sem_Expr ((Lambda (_args) (_body))) =
    (sem_Expr_Lambda (_args) ((sem_Expr (_body))))
sem_Expr ((Let (_decls) (_body))) =
    (sem_Expr_Let ((sem_Decls (_decls))) ((sem_Expr (_body))))
sem_Expr ((PP (_pp))) =
    (sem_Expr_PP (_pp))
sem_Expr ((SimpleExpr (_txt))) =
    (sem_Expr_SimpleExpr (_txt))
sem_Expr ((TupleExpr (_exprs))) =
    (sem_Expr_TupleExpr ((sem_Exprs (_exprs))))
data Inh_Expr = Inh_Expr {nest_Inh_Expr :: Bool}
data Syn_Expr = Syn_Expr {pp_Syn_Expr :: PP_Doc}
wrap_Expr :: (T_Expr) ->
             (Inh_Expr) ->
             (Syn_Expr)
wrap_Expr ((T_Expr (sem))) ((Inh_Expr (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Expr (s1))
sem_Expr_App :: (String) ->
                (T_Exprs) ->
                (T_Expr)
sem_Expr_App (name_) ((T_Exprs (args_))) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _argsIpps :: ([PP_Doc])
                     _argsOnest :: (Bool)
                     ( _argsIpps) =
                         (args_ (_argsOnest))
                     -- "PrintCode.ag"(line 74, column 16)
                     (_lhsOpp@_) =
                         pp_parens $ name_ >#< hv_sp (map pp_parens _argsIpps)
                     -- copy rule (down)
                     (_argsOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Expr_Lambda :: ([String]) ->
                   (T_Expr) ->
                   (T_Expr)
sem_Expr_Lambda (args_) ((T_Expr (body_))) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _bodyIpp :: (PP_Doc)
                     _bodyOnest :: (Bool)
                     ( _bodyIpp) =
                         (body_ (_bodyOnest))
                     -- "PrintCode.ag"(line 70, column 16)
                     (_lhsOpp@_) =
                         (    "\\" >#< (vlist args_) >#< "->"
                              >-< indent 4 _bodyIpp
                         )
                     -- copy rule (down)
                     (_bodyOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Expr_Let :: (T_Decls) ->
                (T_Expr) ->
                (T_Expr)
sem_Expr_Let ((T_Decls (decls_))) ((T_Expr (body_))) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _declsIpps :: ([PP_Doc])
                     _declsOnest :: (Bool)
                     _bodyIpp :: (PP_Doc)
                     _bodyOnest :: (Bool)
                     ( _declsIpps) =
                         (decls_ (_declsOnest))
                     ( _bodyIpp) =
                         (body_ (_bodyOnest))
                     -- "PrintCode.ag"(line 67, column 16)
                     (_lhsOpp@_) =
                         (    "let" >#< (vlist _declsIpps)
                          >-< "in " >#< _bodyIpp
                         )
                     -- copy rule (down)
                     (_declsOnest@_) =
                         _lhsInest
                     -- copy rule (down)
                     (_bodyOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
sem_Expr_PP :: (PP_Doc) ->
               (T_Expr)
sem_Expr_PP (pp_) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     -- "PrintCode.ag"(line 76, column 8)
                     (_lhsOpp@_) =
                         pp_
                 in  ( _lhsOpp)))
sem_Expr_SimpleExpr :: (String) ->
                       (T_Expr)
sem_Expr_SimpleExpr (txt_) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     -- "PrintCode.ag"(line 75, column 16)
                     (_lhsOpp@_) =
                         text txt_
                 in  ( _lhsOpp)))
sem_Expr_TupleExpr :: (T_Exprs) ->
                      (T_Expr)
sem_Expr_TupleExpr ((T_Exprs (exprs_))) =
    (T_Expr (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _exprsIpps :: ([PP_Doc])
                     _exprsOnest :: (Bool)
                     ( _exprsIpps) =
                         (exprs_ (_exprsOnest))
                     -- "PrintCode.ag"(line 73, column 16)
                     (_lhsOpp@_) =
                         ppTuple _lhsInest _exprsIpps
                     -- copy rule (down)
                     (_exprsOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp)))
-- Exprs -------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pps                  : [PP_Doc]

-}
{-
   local variables for Exprs.Cons:

-}
{-
   local variables for Exprs.Nil:

-}
-- semantic domain
newtype T_Exprs = T_Exprs ((Bool) ->
                           ( ([PP_Doc])))
-- cata
sem_Exprs :: (Exprs) ->
             (T_Exprs)
sem_Exprs (list) =
    (foldr (sem_Exprs_Cons) (sem_Exprs_Nil) ((map sem_Expr list)))
data Inh_Exprs = Inh_Exprs {nest_Inh_Exprs :: Bool}
data Syn_Exprs = Syn_Exprs {pps_Syn_Exprs :: [PP_Doc]}
wrap_Exprs :: (T_Exprs) ->
              (Inh_Exprs) ->
              (Syn_Exprs)
wrap_Exprs ((T_Exprs (sem))) ((Inh_Exprs (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Exprs (s1))
sem_Exprs_Cons :: (T_Expr) ->
                  (T_Exprs) ->
                  (T_Exprs)
sem_Exprs_Cons ((T_Expr (hd_))) ((T_Exprs (tl_))) =
    (T_Exprs (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      _hdIpp :: (PP_Doc)
                      _hdOnest :: (Bool)
                      _tlIpps :: ([PP_Doc])
                      _tlOnest :: (Bool)
                      ( _hdIpp) =
                          (hd_ (_hdOnest))
                      ( _tlIpps) =
                          (tl_ (_tlOnest))
                      -- "PrintCode.ag"(line 25, column 10)
                      (_lhsOpps@_) =
                          _hdIpp : _tlIpps
                      -- copy rule (down)
                      (_hdOnest@_) =
                          _lhsInest
                      -- copy rule (down)
                      (_tlOnest@_) =
                          _lhsInest
                  in  ( _lhsOpps)))
sem_Exprs_Nil :: (T_Exprs)
sem_Exprs_Nil  =
    (T_Exprs (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      -- "PrintCode.ag"(line 26, column 10)
                      (_lhsOpps@_) =
                          []
                  in  ( _lhsOpps)))
-- Lhs ---------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for Lhs.Fun:

-}
{-
   local variables for Lhs.Pattern:

-}
{-
   local variables for Lhs.TupleLhs:

-}
-- semantic domain
newtype T_Lhs = T_Lhs ((Bool) ->
                       ( (PP_Doc)))
-- cata
sem_Lhs :: (Lhs) ->
           (T_Lhs)
sem_Lhs ((Fun (_name) (_args))) =
    (sem_Lhs_Fun (_name) ((sem_Exprs (_args))))
sem_Lhs ((Pattern (_pat))) =
    (sem_Lhs_Pattern (_pat))
sem_Lhs ((TupleLhs (_comps))) =
    (sem_Lhs_TupleLhs (_comps))
data Inh_Lhs = Inh_Lhs {nest_Inh_Lhs :: Bool}
data Syn_Lhs = Syn_Lhs {pp_Syn_Lhs :: PP_Doc}
wrap_Lhs :: (T_Lhs) ->
            (Inh_Lhs) ->
            (Syn_Lhs)
wrap_Lhs ((T_Lhs (sem))) ((Inh_Lhs (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Lhs (s1))
sem_Lhs_Fun :: (String) ->
               (T_Exprs) ->
               (T_Lhs)
sem_Lhs_Fun (name_) ((T_Exprs (args_))) =
    (T_Lhs (\ _lhsInest ->
                let _lhsOpp :: (PP_Doc)
                    _argsIpps :: ([PP_Doc])
                    _argsOnest :: (Bool)
                    ( _argsIpps) =
                        (args_ (_argsOnest))
                    -- "PrintCode.ag"(line 86, column 16)
                    (_lhsOpp@_) =
                        name_ >#< hv_sp (map pp_parens _argsIpps)
                    -- copy rule (down)
                    (_argsOnest@_) =
                        _lhsInest
                in  ( _lhsOpp)))
sem_Lhs_Pattern :: (PP_Doc) ->
                   (T_Lhs)
sem_Lhs_Pattern (pat_) =
    (T_Lhs (\ _lhsInest ->
                let _lhsOpp :: (PP_Doc)
                    -- "PrintCode.ag"(line 84, column 16)
                    (_lhsOpp@_) =
                        pp_parens pat_
                in  ( _lhsOpp)))
sem_Lhs_TupleLhs :: ([String]) ->
                    (T_Lhs)
sem_Lhs_TupleLhs (comps_) =
    (T_Lhs (\ _lhsInest ->
                let _lhsOpp :: (PP_Doc)
                    -- "PrintCode.ag"(line 85, column 16)
                    (_lhsOpp@_) =
                        ppTuple _lhsInest (map text comps_)
                in  ( _lhsOpp)))
-- Program -----------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool
      width                : Int

   chained attributes:

   synthesised attributes:
      output               : String

-}
{-
   local variables for Program.Program:

-}
-- semantic domain
newtype T_Program = T_Program ((Bool) ->
                               (Int) ->
                               ( (String)))
-- cata
sem_Program :: (Program) ->
               (T_Program)
sem_Program ((Program (_decls))) =
    (sem_Program_Program ((sem_Decls (_decls))))
data Inh_Program = Inh_Program {nest_Inh_Program :: Bool,width_Inh_Program :: Int}
data Syn_Program = Syn_Program {output_Syn_Program :: String}
wrap_Program :: (T_Program) ->
                (Inh_Program) ->
                (Syn_Program)
wrap_Program ((T_Program (sem))) ((Inh_Program (i1) (i2))) =
    let ( s1) =
            (sem (i1) (i2))
    in  (Syn_Program (s1))
sem_Program_Program :: (T_Decls) ->
                       (T_Program)
sem_Program_Program ((T_Decls (decls_))) =
    (T_Program (\ _lhsInest
                  _lhsIwidth ->
                    let _lhsOoutput :: (String)
                        _declsIpps :: ([PP_Doc])
                        _declsOnest :: (Bool)
                        ( _declsIpps) =
                            (decls_ (_declsOnest))
                        -- "PrintCode.ag"(line 41, column 16)
                        (_lhsOoutput@_) =
                            foldr (\x y -> x . ('\n':) . y) id
                            (map (\d -> disp d _lhsIwidth)  _declsIpps)
                            ""
                        -- copy rule (down)
                        (_declsOnest@_) =
                            _lhsInest
                    in  ( _lhsOoutput)))
-- Type --------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc
      prec                 : Int

-}
{-
   local variables for Type.Arr:
      r
      l

-}
{-
   local variables for Type.List:

-}
{-
   local variables for Type.SimpleType:

-}
{-
   local variables for Type.TupleType:

-}
-- semantic domain
newtype T_Type = T_Type ((Bool) ->
                         ( (PP_Doc),(Int)))
-- cata
sem_Type :: (Type) ->
            (T_Type)
sem_Type ((Arr (_left) (_right))) =
    (sem_Type_Arr ((sem_Type (_left))) ((sem_Type (_right))))
sem_Type ((List (_tp))) =
    (sem_Type_List ((sem_Type (_tp))))
sem_Type ((SimpleType (_txt))) =
    (sem_Type_SimpleType (_txt))
sem_Type ((TupleType (_tps))) =
    (sem_Type_TupleType ((sem_Types (_tps))))
data Inh_Type = Inh_Type {nest_Inh_Type :: Bool}
data Syn_Type = Syn_Type {pp_Syn_Type :: PP_Doc,prec_Syn_Type :: Int}
wrap_Type :: (T_Type) ->
             (Inh_Type) ->
             (Syn_Type)
wrap_Type ((T_Type (sem))) ((Inh_Type (i1))) =
    let ( s1,s2) =
            (sem (i1))
    in  (Syn_Type (s1) (s2))
sem_Type_Arr :: (T_Type) ->
                (T_Type) ->
                (T_Type)
sem_Type_Arr ((T_Type (left_))) ((T_Type (right_))) =
    (T_Type (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _lhsOprec :: (Int)
                     _leftIpp :: (PP_Doc)
                     _leftIprec :: (Int)
                     _leftOnest :: (Bool)
                     _rightIpp :: (PP_Doc)
                     _rightIprec :: (Int)
                     _rightOnest :: (Bool)
                     ( _leftIpp,_leftIprec) =
                         (left_ (_leftOnest))
                     ( _rightIpp,_rightIprec) =
                         (right_ (_rightOnest))
                     -- "PrintCode.ag"(line 91, column 16)
                     (_r@_) =
                         if _rightIprec <  2 then pp_parens _rightIpp else _rightIpp
                     -- "PrintCode.ag"(line 91, column 16)
                     (_l@_) =
                         if _leftIprec  <= 2 then pp_parens _leftIpp  else _leftIpp
                     -- "PrintCode.ag"(line 89, column 16)
                     (_lhsOpp@_) =
                         _l     >#< "->" >-< _r
                     -- "PrintCode.ag"(line 89, column 16)
                     (_lhsOprec@_) =
                         2
                     -- copy rule (down)
                     (_leftOnest@_) =
                         _lhsInest
                     -- copy rule (down)
                     (_rightOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp,_lhsOprec)))
sem_Type_List :: (T_Type) ->
                 (T_Type)
sem_Type_List ((T_Type (tp_))) =
    (T_Type (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _lhsOprec :: (Int)
                     _tpIpp :: (PP_Doc)
                     _tpIprec :: (Int)
                     _tpOnest :: (Bool)
                     ( _tpIpp,_tpIprec) =
                         (tp_ (_tpOnest))
                     -- "PrintCode.ag"(line 97, column 16)
                     (_lhsOpp@_) =
                         "[" >|< _tpIpp >|< "]"
                     -- "PrintCode.ag"(line 97, column 16)
                     (_lhsOprec@_) =
                         5
                     -- copy rule (down)
                     (_tpOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp,_lhsOprec)))
sem_Type_SimpleType :: (String) ->
                       (T_Type)
sem_Type_SimpleType (txt_) =
    (T_Type (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _lhsOprec :: (Int)
                     -- "PrintCode.ag"(line 100, column 16)
                     (_lhsOpp@_) =
                         pp_parens $ text txt_
                     -- "PrintCode.ag"(line 100, column 16)
                     (_lhsOprec@_) =
                         5
                 in  ( _lhsOpp,_lhsOprec)))
sem_Type_TupleType :: (T_Types) ->
                      (T_Type)
sem_Type_TupleType ((T_Types (tps_))) =
    (T_Type (\ _lhsInest ->
                 let _lhsOpp :: (PP_Doc)
                     _lhsOprec :: (Int)
                     _tpsIpps :: ([PP_Doc])
                     _tpsOnest :: (Bool)
                     ( _tpsIpps) =
                         (tps_ (_tpsOnest))
                     -- "PrintCode.ag"(line 94, column 16)
                     (_lhsOpp@_) =
                         ppTuple _lhsInest _tpsIpps
                     -- "PrintCode.ag"(line 94, column 16)
                     (_lhsOprec@_) =
                         5
                     -- copy rule (down)
                     (_tpsOnest@_) =
                         _lhsInest
                 in  ( _lhsOpp,_lhsOprec)))
-- Types -------------------------------------------------------
{-
   inherited attributes:
      nest                 : Bool

   chained attributes:

   synthesised attributes:
      pps                  : [PP_Doc]

-}
{-
   local variables for Types.Cons:

-}
{-
   local variables for Types.Nil:

-}
-- semantic domain
newtype T_Types = T_Types ((Bool) ->
                           ( ([PP_Doc])))
-- cata
sem_Types :: (Types) ->
             (T_Types)
sem_Types (list) =
    (foldr (sem_Types_Cons) (sem_Types_Nil) ((map sem_Type list)))
data Inh_Types = Inh_Types {nest_Inh_Types :: Bool}
data Syn_Types = Syn_Types {pps_Syn_Types :: [PP_Doc]}
wrap_Types :: (T_Types) ->
              (Inh_Types) ->
              (Syn_Types)
wrap_Types ((T_Types (sem))) ((Inh_Types (i1))) =
    let ( s1) =
            (sem (i1))
    in  (Syn_Types (s1))
sem_Types_Cons :: (T_Type) ->
                  (T_Types) ->
                  (T_Types)
sem_Types_Cons ((T_Type (hd_))) ((T_Types (tl_))) =
    (T_Types (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      _hdIpp :: (PP_Doc)
                      _hdIprec :: (Int)
                      _hdOnest :: (Bool)
                      _tlIpps :: ([PP_Doc])
                      _tlOnest :: (Bool)
                      ( _hdIpp,_hdIprec) =
                          (hd_ (_hdOnest))
                      ( _tlIpps) =
                          (tl_ (_tlOnest))
                      -- "PrintCode.ag"(line 33, column 10)
                      (_lhsOpps@_) =
                          _hdIpp : _tlIpps
                      -- copy rule (down)
                      (_hdOnest@_) =
                          _lhsInest
                      -- copy rule (down)
                      (_tlOnest@_) =
                          _lhsInest
                  in  ( _lhsOpps)))
sem_Types_Nil :: (T_Types)
sem_Types_Nil  =
    (T_Types (\ _lhsInest ->
                  let _lhsOpps :: ([PP_Doc])
                      -- "PrintCode.ag"(line 34, column 10)
                      (_lhsOpps@_) =
                          []
                  in  ( _lhsOpps)))


