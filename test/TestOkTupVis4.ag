-- A grammar that requires two visits, and an attribute w that is needed in both passes
-- and three local attributes p and q and r, 
--    q is needed only in visit 0
--    p is needed in visit 0 and in visit 1
--    r is needed only in visit 1
-- This is the same as TupVis3, but in visit 1 now r is used in a different rule (used to define zz) than p (used to define z)

-- We now have a fatal error.
-- The tuple is evaluated twice in visit 0 (to calculate p and q), and a third time in visit 1 (to calculate r)
-- However, in visit 1 this is too late to use the value p.
-- So GHC complains about p not having been defined in the rule for z.

-- The correct implementation would be to evaluate the tuple once in visit 0,
-- and to pass p and r as intra-parameters to visit 1.

DATA Root
   | Root  a : Aap

DATA Aap
	| Een   t : Int
	| Twee  u : Aap


ATTR Aap [ x : Int | y : Int |  z : Int   w : Int  zz : Int]


SEM Root
  | Root  a.x = @a.y + @a.w
          a.y = 7
          
SEM Aap
  | Een  lhs.y = @t          + @loc.p + @loc.q 
         lhs.z = @t + @lhs.x + @loc.p
         lhs.zz =     @lhs.x + @loc.r
         lhs.w = 3 
         loc.p : Int
         loc.q : Int
         loc.r : Int
         loc.(p,q,r) = (8,9,10)
         
  | Twee lhs.y = 7
         lhs.z = @u.w   
         lhs.zz = 5
