MODULE {TestOkMerge} {} {}

optpragmas
{
{-# LANGUAGE TypeFamilies #-}
}

imports
{
import Control.Monad.Stepwise.AG
import Data.Map
import Data.Monoid
import Control.Applicative
}

{
type Env = Map String Bool
}

PRAGMA breadthfirst

DATA Root
  | Root  prop : Prop

DATA Prop
  | Con  bool  : Bool            -- constants |True| and |False|
  | Ext  fun   : {Env -> Prop}   -- external function
  | Let  nm    : String          -- binding a (non-recursive)
         expr  : Prop            -- name to a prop
         body  : Prop
  | And  left  : Prop            -- the logical and of two props
         right : Prop
  | Or   left  : Prop            -- the logical or of two props
         right : Prop

ATTR Root Prop [ env : Env | | outcome : Bool ]

SEM Prop
  | Con  loc.effect = if @bool then (emit Work >>) else (fail "false" >>)
         lhs.outcome = @result.outcome
  | Ext  inst.k : Prop
         inst.k = @fun @lhs.env         
  | Let  body.env    = insert @nm @expr.outcome @lhs.env
  | And  lhs.outcome = @left.outcome && @right.outcome
  | Or   lhs.outcome = @result.outcome

{
var :: String -> Prop
var nm = Prop_Ext (\env -> Prop_Con (findWithDefault (error "not found") nm env))
}

SEM Prop
  | Con MERGE result : Prop = @loc.effect $ return $ T_Prop_Syn @bool
  | Or  MERGE left right AS result : Prop = best


WRAPPER Root

{
data EvalInfo t = Work

best :: Comp EvalInfo I_T_Prop -> Comp EvalInfo I_T_Prop -> Comp EvalInfo I_T_Prop
best l r = globalChoice (unsafeTranslate l) (unsafeTranslate r)
}

{
main :: IO ()
main = putStrLn (show res)
  where
    tree = Root_Root $ Prop_Or (Prop_And big $ var "f") (var "f")
    big  = Prop_And (var "t") big
    inh = Inh_Root { env_Inh_Root = fromList [ ("t", True), ("f", False) ] }
    sem = sem_Root tree
    syn = wrap_Root sem inh
    res = outcome_Syn_Root syn
}
