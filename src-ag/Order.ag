PRAGMA strictdata
PRAGMA strictwrap

--REMOVED SM INCLUDE "GenerateCodeSM.ag"
INCLUDE "Patterns.ag"
INCLUDE "Expression.ag"
INCLUDE "AbstractSyntax.ag"
imports
{
-- From uuagc
import CommonTypes
import Patterns
import ErrorMessages
import AbstractSyntax
import Code hiding (Type)
import qualified Code
import Expression
import Options
import SequentialComputation
import SequentialTypes
import CodeSyntax
import GrammarInfo
import HsToken(HsTokensRoot(HsTokensRoot))
import HsTokenScanner(lexTokens)
import SemHsTokens(sem_HsTokensRoot,wrap_HsTokensRoot, Syn_HsTokensRoot(..),Inh_HsTokensRoot(..))
-- From uulib
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified UU.DData.Seq as Seq
import Data.Map(Map) 
import Data.Set(Set)
import UU.DData.Seq(Seq, (<>)) 
import UU.Util.Utils
import UU.Scanner.Position(Pos(..),initPos)

-- From haskell libraries
import Control.Monad(liftM)
import qualified Data.Array as Array
import Data.Array((!),bounds,inRange)
import Data.List(elemIndex,partition,sort,mapAccumL,find,nubBy,intersperse,groupBy,transpose)
import qualified Data.Tree as Tree
import Maybe
}

{
-- Terminates with an error if the key is not in the map
findWithErr1 :: (Ord k, Show k) => String -> k -> Map k a -> a
findWithErr1 s k
  = Map.findWithDefault (error ("findWithErr1 " ++ s ++ ": key " ++ show k ++ " not in map.")) k

findWithErr2 :: (Ord k, Show k, Show a) => k -> Map k a -> a
findWithErr2 k m
  = Map.findWithDefault (error ("findWithErr2: key " ++ show k ++ " not in map: " ++ show m)) k m
}

-------------------------------------------------------------------------------
--         Errors
-------------------------------------------------------------------------------
-- Everyone that wants to report an error can do this by adding an error message to the
-- stream of errors

ATTR Nonterminals Nonterminal Productions Production
     Child Children Rule Rules Pattern Patterns Grammar [ | | errors USE {Seq.<>} {Seq.empty}:{Seq Error} ]

-------------------------------------------------------------------------------
--         Distributing name of nonterminal and names of attributes
-------------------------------------------------------------------------------
ATTR Productions Production Child Children Rules Rule Patterns Pattern [ nt : {Identifier} inh,syn : {Attributes} | | ]
ATTR Child Children Rules Rule Patterns Pattern [ con : {Identifier} | | ]

SEM Production
  | Production children . con = @con
SEM Production
  | Production rules . con = @con
SEM Nonterminal
  | Nonterminal prods . nt = @nt

SEM Nonterminal
  | Nonterminal prods.inh  = @inh
                prods.syn  = @syn


-------------------------------------------------------------------------------
--         Distributing options
-------------------------------------------------------------------------------

ATTR Grammar          [ options:{Options} | | ]
ATTR Nonterminals Nonterminal Productions Production Rules Rule 
   [ o_newtypes
   , o_cata
   , o_sig
   , o_sem
   , o_rename
   , o_wantvisit -- True if the option for visit functions has been specified
   , o_dovisit   -- True if o_wantvisit and it is possible to generate visit functions (no cycles)
   , o_case:{Bool}  
   prefix : {String} | | ]
ATTR Nonterminals Nonterminal Productions Production Children Child [ o_unbox:{Bool} | | ]
ATTR Nonterminals Nonterminal [ o_data:{Bool} | | ]

SEM Grammar
  | Grammar     nonts.o_cata    = folds     @lhs.options
                     .o_data    = dataTypes @lhs.options
                     .o_sig     = typeSigs  @lhs.options
                     .o_sem     = semfuns   @lhs.options
                     .o_rename  = rename    @lhs.options
                     .o_newtypes= newtypes  @lhs.options
                     .o_wantvisit = visit   @lhs.options
                     .o_dovisit = visit     @lhs.options && null @cyclesErrors
                     .o_unbox   = unbox     @lhs.options
                     .o_case    = cases     @lhs.options
                     .prefix    = prefix    @lhs.options

------------------------------------------------------------------
-- Building a mapping from Vertices to Ints
------------------------------------------------------------------
{
getNtName :: Type -> NontermIdent
getNtName (NT nt _) = nt
getNtName _         = nullIdent
}

------------------------------------------------------------------
-- Collect attribute occurrences
--
-- All attribute occurences in an alternative are gathered.
-- This is done by joining various sublists:
--  1.  inherited attributes for _LHS
--  2a. synthesized attributes for children
--  2b. children that are a trivial field
--  3a. inherited attributes for children 
--  3b. synthesized attributes for _LHS
--  3c. local attributes
--
-- Sublist 3 is exactly the targets for ATTR definitions, and
-- thus can be obtained by traversing all rules.
--
-- The (field,attr) combination is not enough to uniquely identify
-- an attribute occurence, because threaded attributes occur twice.
-- Therefore, in the AltAttr structures, a boolean is added,
-- that is False in sublists 3a and 3b, i.e. the non-local output fields.
--
-- Each AltAttr, that is eacht attribute occurence, is mapped to a number
-- in the altAttrs Map, starting at vcount
{
data AltAttr = AltAttr Identifier Identifier Bool 
               deriving (Eq, Ord, Show)
}
ATTR Children Child Rules Rule Patterns Pattern [ | | gathAltAttrs USE {++} {[]} : {[AltAttr]} ]
SEM  Production
  |  Production  loc.gathAltAttrs =  [ AltAttr _LHS inh True | inh <- Map.keys @lhs.inh ]   -- sublist 1
                                      ++ @children.gathAltAttrs                              -- sublist 2
                                      ++ @rules.gathAltAttrs                                 -- sublist 3

SEM  Child
  |  Child  loc.maptolocal =  case @tp of
                                NT nt _ -> Map.null @syn
                                _       -> True
            lhs.gathAltAttrs = if  @maptolocal
                                   then [ AltAttr _LOC @name True ]                          -- sublist 2b
                                   else [ AltAttr @name syn True | syn <- Map.keys @syn ]    -- sublist 2a
SEM  Pattern
  |  Alias lhs.gathAltAttrs = [AltAttr @field @attr (@field == _LOC || @field == _INST)]     -- sublist 3

ATTR Rules Rule Patterns Pattern [ altAttrs : {Map AltAttr Vertex} | | ]
SEM  Production
  |  Production rules.altAttrs = Map.fromList (zip @gathAltAttrs [@lhs.vcount..])

-- Information passed to Pattern
ATTR  Children Child 
      [  | |  nts USE {Seq.<>} {Seq.empty} : {Seq (Identifier,NontermIdent)} 
              inhs USE {Seq.<>} {Seq.empty} : {Seq (Identifier,Attributes)} ]
SEM  Child
  |  Child  lhs.nts = Seq.single (@name,getNtName @tp)
            lhs.inhs = Seq.single (@name,@inh)
ATTR  Rules Rule
      [  childNts : {Map Identifier NontermIdent} 
         childInhs : {Map Identifier Attributes} | | ]
SEM  Production
  |  Production  rules.childNts = Map.fromList (Seq.toList @children.nts)
                  rules.childInhs = Map.fromList (Seq.toList @children.inhs)

-- Collect CRules
ATTR  Children Child Rules Rule
      [ | | gathRules USE {Seq.<>} {Seq.empty} : {Seq CRule} ]
SEM  Production
  |  Production  loc.inhRules = [ cRuleLhsInh inh @lhs.nt @con tp | (inh,tp) <- Map.assocs @lhs.inh ]
                  loc.gathRules = @inhRules ++ Seq.toList (@children.gathRules Seq.<> @rules.gathRules)

SEM  Child
  |  Child  loc.gathRules = if  @maptolocal
                                then Seq.single (cRuleTerminal @name @lhs.nt @lhs.con @tp)
                                else Seq.fromList [ cRuleRhsSyn syn @lhs.nt @lhs.con tp @name (getNtName @tp) | (syn,tp) <- Map.assocs @syn]

SEM  Rule
  |  Rule  loc.defines = let  tp field attr parts | field == _LOC || field == _INST
                                                                  = case parts of 
                                                                      [] -> Map.lookup attr @lhs.allTypeSigs
                                                                      _  -> (sequence (map typ parts)) >>= (haskellTupel . map (substSelf @lhs.nt))
                                                  | field == _LHS = Map.lookup attr @lhs.syn
                                                  | otherwise     = Map.lookup attr (findWithErr1 "Rule.defines.tp" field @lhs.childInhs)
                              typ :: Pattern -> Maybe Type
                              typ (Alias field attr _ parts) = tp field attr parts
                              typ (Underscore _)             = Nothing
                              typ (Product _ pats)           = tp _LOC undefined pats
                              typ _                          = Nothing
                              
                         in Map.fromList  [ (findWithErr1 "Rule.defines" aa @lhs.altAttrs, (field,attr,(tp field attr parts)))
                                          | (field,attr,isLocalOrInst,parts) <- @pattern.patternAttrs
                                          , let aa = AltAttr field attr isLocalOrInst
                                          ]
           loc.gathRules =  let childnt field = Map.lookup field @lhs.childNts
                            in Seq.fromList [ CRule attr False True @lhs.nt @lhs.con field (childnt field) tp @pattern.copy @rhs.textLines @defines @owrt @origin @rhs.allRhsVars
                                            | (field,attr,tp) <- Map.elems @defines 
                                            ]

{
substSelf nt tp
  = case tp of
      NT n tps | n == _SELF -> NT nt tps
      _                     -> tp
	
haskellTupel :: [Type] -> Maybe Type
haskellTupel ts =  Just ( Haskell ( '(' : (concat (intersperse "," (map show ts))) ++ ")" ))
}


ATTR Patterns Pattern [ | | patternAttrs USE {++} {[]} : {[(Identifier,Identifier,Bool,Patterns)]} ]

SEM  Pattern
  |  Alias lhs.patternAttrs = [(@field,@attr,(@field == _LOC || @field == _INST),@parts.copy)]



-- Giving them a number
ATTR  Nonterminals Nonterminal Productions Production
      [  | vcount : Int 
         | rules USE {Seq.<>} {Seq.empty} : {Seq (Vertex,CRule)}]
SEM  Grammar
  |  Grammar  nonts.vcount = 0
SEM  Production
  |  Production  lhs.rules = Seq.fromList (zip [@lhs.vcount..] @gathRules)
                  lhs.vcount = @lhs.vcount + length @gathRules

-- Direct dependencies
ATTR Nonterminals Nonterminal 
     Productions Production 
     Rules Rule [ | | directDep USE {Seq.<>} {Seq.empty} : {Seq Edge} ]
SEM  Rule
  |  Rule  lhs.directDep
             = let  defined = Map.keys @defines
                    used =  [ Map.lookup (AltAttr field attr True) @lhs.altAttrs | (field,attr) <- @rhs.usedAttrs]
                            ++ [ Map.lookup (AltAttr _LOC attr True) @lhs.altAttrs | attr <- @rhs.usedLocals ++ @rhs.usedFields ]
               in Seq.fromList [ (x,y) | Just x <- used, y <- defined ]

-- Manual depdendencies (provided by the programmer)
--
-- a dependency f1.a1 < f2.a2 is translated to
-- the edge (vertex(f1.a1), vertex(f2.a2))
ATTR Nonterminals Nonterminal
     Productions Production
     Rules Rule [ manualAttrDepMap : {AttrOrderMap} | | additionalDep USE {Seq.<>} {Seq.empty} : {Seq Edge} ]
SEM Grammar
  | Grammar
      nonts.manualAttrDepMap = @manualAttrOrderMap
SEM Rule
  | Rule
      loc.manualDeps
        = Set.toList $ Map.findWithDefault Set.empty @lhs.con $ Map.findWithDefault Map.empty @lhs.nt @lhs.manualAttrDepMap
      lhs.additionalDep
        = Seq.fromList [ (vertexA, vertexB)
                       | Dependency (fldA,nmA) (fldB,nmB) <- @loc.manualDeps
                       , let vertexA = findWithErr2 (AltAttr fldA nmA True) @lhs.altAttrs
                       , vertexB <- lookupVertices fldB nmB @lhs.altAttrs
                       ]

{
lookupVertices :: Identifier -> Identifier -> Map AltAttr Int -> [Int]
lookupVertices fld nm attrs
  = catMaybes (  [Map.lookup (AltAttr fld nm False) attrs]  -- look for all "out" attributes
              ++ if fld == _LOC
                 then [Map.lookup (AltAttr fld nm True) attrs]
                 else []
              )
}

-- Inst dependencies
--
-- For each inst attribute x of nt N, add the dependency
--  (inst.x,x.y) for each synthesized attribute of N
--

ATTR Nonterminals Nonterminal 
     Productions Production 
     Rules Rule [ | | instDep USE {Seq.<>} {Seq.empty} : {Seq Edge} ]
SEM Rule
  | Rule
      lhs.instDep
        = Seq.fromList $
            [ (instVert, synVert)
            | (field,instNm,_) <- Map.elems @defines
            , field == _INST
            , synNm <- Map.keys (findWithErr2 instNm @lhs.synsOfChildren)
            , let instAttr = AltAttr _INST instNm True
                  synAttr  = AltAttr instNm synNm True
                  instVert = findWithErr2 instAttr @lhs.altAttrs
                  synVert  = findWithErr2 synAttr @lhs.altAttrs
            ]

ATTR Rules Rule [ synsOfChildren : {Map Identifier Attributes} | | ]
SEM Production
  | Production  rules.synsOfChildren = @children.collectChildrenSyns

ATTR Children Child [ | | collectChildrenSyns USE {`Map.union`} {Map.empty} : {Map Identifier Attributes } ]
SEM Child
  | Child  lhs.collectChildrenSyns = Map.singleton @name @syn


-- Wrapping an Expression

ATTR Expression [ nt,con   :{Identifier}
                  allfields:{[(Identifier,Type,Bool)]}
                  allnts   :{[Identifier]}
                  attrs    :{[(Identifier,Identifier)]}
                ||
                  errors   :{Seq Error}
                  usedLocals:{[Identifier]}
                  usedAttrs :{[(Identifier,Identifier)]}
                  usedFields:{[Identifier]}
                  textLines :{[String]}
                  copy : SELF
                  allRhsVars : {Set (Identifier,Identifier)}
                ]

SEM Expression
  | Expression  loc.(errors,textLines,usedAttrs,usedLocals,usedFields)
                            = let inherited = Inh_HsTokensRoot
                                              { attrs_Inh_HsTokensRoot      = @lhs.attrs
                                              , con_Inh_HsTokensRoot        = @lhs.con
                                              , allfields_Inh_HsTokensRoot  = @lhs.allfields
                                              , allnts_Inh_HsTokensRoot     = @lhs.allnts
                                              , nt_Inh_HsTokensRoot         = @lhs.nt
                                              }
                                  synthesized = wrap_HsTokensRoot (sem_HsTokensRoot (HsTokensRoot @tks)) inherited
                              in case synthesized of
                                   Syn_HsTokensRoot
                                    { errors_Syn_HsTokensRoot     = errors
                                    , textLines_Syn_HsTokensRoot  = textLines
                                    , usedAttrs_Syn_HsTokensRoot  = usedAttrs
                                    , usedLocals_Syn_HsTokensRoot = usedLocals
                                    , usedFields_Syn_HsTokensRoot = usedFields
                                    }  -> (errors,textLines,usedAttrs,usedLocals,usedFields)

                lhs.allRhsVars = Set.fromList @loc.usedAttrs
                                 `Set.union`
                                 Set.fromList [ (_LOC, l) | l <- @loc.usedLocals]
                                 `Set.union`
                                 Set.fromList [ (_FIELD, fld) | fld <- @loc.usedFields]

-------------------------------------
-- NT-Attributes
-------------------------------------
ATTR  Nonterminals Nonterminal 
      [ | acount : Int |  ntattrs USE {Seq.<>} {Seq.empty} : {Seq (Vertex,NTAttr)} 
                          aranges  USE {Seq.<>} {Seq.empty} : {Seq (Int,Int,Int)}]

SEM Grammar
  | Grammar nonts.acount = 0

SEM Nonterminal
  | Nonterminal loc.ntattrs =  [ NTAInh @nt inh tp | (inh,tp) <- Map.assocs @inh ]
                               ++ [NTASyn @nt syn tp | (syn,tp) <- Map.assocs @syn ]
                lhs.ntattrs = Seq.fromList (zip [@lhs.acount ..] @ntattrs)
                lhs.acount  = @lhs.acount + Map.size @inh + Map.size @syn
                lhs.aranges =  Seq.single
                                (@lhs.acount
                                ,@lhs.acount + Map.size @inh
                                ,@lhs.acount + Map.size @syn + Map.size @inh - 1)
------------------------------------------------------------------
-- Pass structure up
------------------------------------------------------------------
ATTR Nonterminals Nonterminal [ | | nonts USE {++} {[]} : {[(NontermIdent,[ConstructorIdent])]} ]
SEM  Nonterminal
  |  Nonterminal  lhs.nonts = [(@nt,@prods.cons)]
ATTR Productions Production [ | | cons USE {++} {[]} : {[ConstructorIdent]} ]
SEM  Production
  |  Production  lhs.cons = [@con]

------------------------------------------------------------------
-- Collect type signatures
------------------------------------------------------------------
ATTR TypeSigs TypeSig [ | typeSigs : {Map Identifier Type} | ]
SEM Production
  | Production typeSigs.typeSigs = Map.empty
SEM TypeSig
  | TypeSig lhs.typeSigs = Map.insert @name @tp @lhs.typeSigs

ATTR Rules Rule Patterns Pattern [ allTypeSigs : {Map Identifier Type} | | ]
SEM  Production
  |  Production rules.allTypeSigs = @typeSigs.typeSigs

------------------------------------------------------------------
-- Invoking sequential computation
------------------------------------------------------------------
SEM Grammar
  | Grammar loc.ruleTable = Array.array (0,@nonts.vcount-1) (Seq.toList @nonts.rules)
            loc.attrTable = Array.array (0,@nonts.acount-1) (Seq.toList @nonts.ntattrs)
            loc.attrVertex = Map.fromList (map swap (Seq.toList @nonts.ntattrs))
            loc.tdpToTds  = [ (s, maybe (-1) (\v -> findWithErr1 "Grammar.tdpToTds" v @attrVertex) (ntattr cr))
                            | (s,cr) <- Seq.toList @nonts.rules]
            loc.tdsToTdp  =  let  eq (_,v) (_,v') = v == v'
                                  conv ((s,v):svs)  | v == -1 = Nothing
                                                    | otherwise = Just (v,s:map fst svs)
                             in mapMaybe conv (eqClasses eq @tdpToTds)
            loc.directDep = Seq.toList (@nonts.directDep Seq.<> @nonts.additionalDep)
            loc.instDep   = Seq.toList @nonts.instDep
            loc.info      = let def [] = -1
                                def (v:vs) = v
                             in Info { tdsToTdp   = Array.array (0,@nonts.acount-1) @tdsToTdp
                                     , tdpToTds   = Array.array (0,@nonts.vcount-1) @tdpToTds
                                     , attrTable  = @attrTable
                                     , ruleTable  = @ruleTable
                                     , lmh        = Seq.toList @nonts.aranges
                                     , nonts      = @nonts.nonts
                                     , wraps      = @wrappers
                                     }

            loc.(cInterfaceMap,cVisitsMap,cyclesErrors) =
                              case computeSequential @info @directDep @instDep of
                                           CycleFree    cim cvm   -> ( cim
                                                                     , cvm
                                                                     , []
                                                                     )
                                           LocalCycle   errs      -> ( error "No interfaces for AG with local cycles"
                                                                     , error "No visit sub-sequences for AG with local cycles"
                                                                     , map (localCycleErr @ruleTable (visit @lhs.options)) errs
                                                                     )
                                           InstCycle    errs      -> ( error "No interfaces for AG with cycles through insts"
                                                                     , error "No visit sub-sequences for AG with cycles through insts"
                                                                     , map (instCycleErr @ruleTable (visit @lhs.options)) errs
                                                                     )
                                           DirectCycle  errs      -> ( error "No interfaces for AG with direct cycles"
                                                                     , error "No visit sub-sequences for AG with direct cycles"
                                                                     , directCycleErrs @attrTable @ruleTable (visit @lhs.options) errs
                                                                     )
                                           InducedCycle cim errs ->  ( cim
                                                                     , error "No visit sub-sequences for AG with induced cycles"
                                                                     , inducedCycleErrs @attrTable @ruleTable cim errs
                                                                     )
            lhs.errors := (if withCycle @lhs.options then Seq.fromList @cyclesErrors else Seq.empty) 
                          Seq.<> @nonts.errors

------------------------------------------------------------------
-- Generate CGrammar
------------------------------------------------------------------
-- Pass InterfaceMap down and select the Interface in the Nonterminal
ATTR Nonterminals Nonterminal [ cInterfaceMap : CInterfaceMap | | ]
SEM  Nonterminal
  |  Nonterminal  loc.cInter = if  @lhs.o_dovisit
                                      then findWithErr1 "Nonterminal.cInter" @nt @lhs.cInterfaceMap
                                      else CInterface [CSegment @inh @syn]

-- Pass VisitMap down and select the CVisits in the Production
ATTR Nonterminals Nonterminal Productions Production [ cVisitsMap : CVisitsMap | | ]
SEM  Production
  |  Production loc.cVisits = if  @lhs.o_dovisit
                                   then let prodsVisitsMap = findWithErr1 "Production.cVisits.nt" @lhs.nt @lhs.cVisitsMap
                                            visits = findWithErr1 "Production.cVisits.con" @con prodsVisitsMap
                                         in visits
                                   else  let  vss = nubBy eqCRuleDefines @gathRules ++ @children.singlevisits
                                         in  [CVisit @lhs.inh @lhs.syn vss [] False]

-- Declarations for single visits
ATTR Child Children [ | | singlevisits USE {++} {[]}: {[CRule]}]
SEM Child 
  | Child lhs.singlevisits  =  if  @maptolocal
                                   then []
                                   else [CChildVisit @name (getNtName @tp) 0 @inh @syn True]

-- Now just build the CGrammar
SEM  Grammar [ | | output : CGrammar ]
  |  Grammar  lhs.output = CGrammar @typeSyns @derivings @wrappers @nonts.cNonterminals @pragmas @paramMap @contextMap
SEM  Nonterminals [ | | cNonterminals : CNonterminals ]
  |  Cons  lhs.cNonterminals = @hd.cNonterminal : @tl.cNonterminals
  |  Nil   lhs.cNonterminals = []
SEM  Nonterminal [ | | cNonterminal : CNonterminal ]
  |  Nonterminal  lhs.cNonterminal = CNonterminal @nt @params @inh @syn @prods.cProductions @cInter
SEM  Productions [ | | cProductions : CProductions ]
  |  Cons  lhs.cProductions = @hd.cProduction : @tl.cProductions
  |  Nil   lhs.cProductions = []
SEM  Production [ | | cProduction : CProduction ]
  |  Production  lhs.cProduction = CProduction @con @cVisits @children.fields @children.terminals

-- Collect terminals
ATTR Children Child  [ | | terminals USE {++} {[]} : {[Identifier]} ]
SEM Child
  | Child lhs.terminals = if @maptolocal
                          then [@name]
                          else []


-- Collecting nts
ATTR Nonterminal Nonterminals
     Production Productions
     Rule Rules 
     Child Children [allnts:{[Identifier]} | | ]
     
SEM Grammar
  | Grammar nonts.allnts = map fst (@nonts.nonts)

-- Collecting fields
ATTR Rule Rules 
     Child Children [allfields:{[(Identifier,Type,Bool)]} attrs:{[(Identifier,Identifier)]} | | ]

SEM Production
  | Production loc.allfields  = @children.fields
                   .attrs      = map ((,) _LOC)  @rules.locVars ++
                                 map ((,) _INST) @rules.instVars ++
                                 map ((,) _LHS)  @inhnames ++ 
                                 concat [map ((,) nm) (Map.keys as) | (nm,_,as) <- @children.attributes]
                   .inhnames   = Map.keys @lhs.inh
                   .synnames   = Map.keys @lhs.syn

ATTR Children [ | | attributes USE {++} {[]} : {[(Identifier,Attributes,Attributes)]} ]
SEM Child [ | | attributes:{[(Identifier,Attributes,Attributes)]} ]
  | Child lhs.attributes = [(@name, @inh, @syn)]


SEM Child [ | | field : {(Identifier,Type,Bool)} ]
  | Child lhs.field = (@name, @tp, @higherOrder)

SEM Children [ | | fields : {[(Identifier,Type,Bool)]} ]
  | Cons  lhs.fields = @hd.field : @tl.fields
  | Nil   lhs.fields = []

ATTR Rules Rule Patterns Pattern [ | | locVars USE {++} {[]}:{[Identifier]} instVars USE {++} {[]} : {[Identifier]} ]

SEM Pattern
  | Alias    lhs.locVars   = if @field == _LOC
                                then [@attr]
                                else []
             lhs.instVars  = if @field == _INST
                                then [@attr]
                                else []

{
swap (a,b) = (b,a)

showPath :: Table CRule -> [Vertex] -> [String]
showPath ruleTable path
  =  let  look a | inRange (bounds ruleTable) a = [showOrigin (ruleTable ! a)]
                 | otherwise = ["Vertex " ++ show a]
          showOrigin cr  | getHasCode cr && getName (getAttr cr) /= "self" = prettyCRule cr ++ " (" ++ show (getPos (getAttr cr)) ++ ")"
                         | otherwise = prettyCRule cr
     in concatMap look path


showPathLocal :: Table CRule -> [Vertex] -> [String]
showPathLocal _ [] = []
showPathLocal ruleTable xs = showP (xs++[-1])
 where showP []         = []
       showP (v1:v2:vs) = let line  = step v1 v2
                              lines = showP vs
                          in  line:lines
       step v1 v2  = " - " ++ a1
        where r1 = ruleTable ! v1
              a1 = show (getAttr  r1)


limitTo :: Int -> [String] -> [String]
limitTo _ [] = [] 
limitTo 0 _ = ["....etcetera, etcetera...."]
limitTo n (x:xs) = x : limitTo (n-1) xs

showPathNice :: Table CRule -> [Vertex] -> [String]
showPathNice _ [] = []
showPathNice ruleTable xs = limitTo 100 (showP ((-1):xs++[-1]))
 where [maxf, maxa, maxn, maxc] = maxWidths ruleTable (take 100 xs)
       showP []         = []
       showP (v1:v2:vs) = let line  = step v1 v2
                              lines = showP vs
                          in  if null line  then lines  else line:lines
       step v1 v2  |  last &&      first    = induced
                   |  last &&     isSyn r1  = "pass up        "  ++ alignR maxf ""    ++ " " ++ alignL maxa a1 ++ " in " ++ alignR maxn n1 ++ "|" ++ c1 ++ induced
                   |  first&& not(isSyn r2) = "get from above "  ++ alignR maxf ""    ++ " " ++ alignL maxa a2 ++ " in " ++ alignR maxn n2 ++ "|" ++ c2
                   |  last                  = "pass down      "  ++ alignR maxf f1    ++ "." ++ a1                                                      ++ induced
                   |              isSyn r2  = "get from below "  ++ alignR maxf f2    ++ "." ++ alignL maxa a2 ++ " in " ++ alignR maxn n2 ++ "|" ++ c2
                   |  isLocal r1  = if head a1 == '_' 
                                         then ""
                                         else "calculate      "  ++ alignR maxf "loc" ++ "." ++ a1
                   |  otherwise             = "pass down      "  ++ alignR maxf f1    ++ "." ++ alignL maxa a1 ++ " to " ++ alignR maxn n2 ++ "|" ++ c2
          where
              first = v1<0
              last  = v2<0
              r1 = ruleTable ! v1
              r2 = ruleTable ! v2
              a1 = show (getAttr  r1)
              a2 = show (getAttr  r2)
              f1 = show (getField r1)
              f2 = show (getField r2)
              n1 = show (getLhsNt r1)
              n2 = show (getLhsNt r2)
              c1 = show (getCon   r1)
              c2 = show (getCon   r2)
              induced | v2== -2   =  " INDUCED dependency to "
                      | otherwise = ""


maxWidths ruleTable vs
  = map maximum (transpose (map getWidth vs))
  where getWidth v | v<0       = [0,0,0,0]
                   | otherwise = map (length . show . ($ (ruleTable!v))) [getField, getAttr, getLhsNt, getCon]

alignL n xs | k<n       = xs ++ replicate (n-k) ' '
            | otherwise = xs
              where k = length xs

alignR n xs | k<n       = replicate (n-k) ' ' ++ xs
            | otherwise = xs
              where k = length xs

localCycleErr :: Table CRule -> Bool -> Route -> Error
localCycleErr ruleTable o_visit (s:path)
  =  let cr = ruleTable ! s
         attr = getAttr cr
         nt = getLhsNt cr
         con = getCon cr
     in LocalCirc nt con attr o_visit (showPathLocal ruleTable path)

instCycleErr :: Table CRule -> Bool -> Route -> Error
instCycleErr ruleTable o_visit (s:path)
  =  let cr = ruleTable ! s
         attr = getAttr cr
         nt = getLhsNt cr
         con = getCon cr
     in InstCirc nt con attr o_visit (showPathLocal ruleTable path)

directCycleErrs :: Table NTAttr -> Table CRule -> Bool -> [EdgeRoutes] -> [Error]
directCycleErrs attrTable ruleTable o_visit xs
  = let getNont v = case attrTable ! v of
                      NTASyn nt _ _ -> nt
                      NTAInh nt _ _ -> nt
        getAttr v = case attrTable ! v of
                      NTASyn _ a _  -> a
                      NTAInh _ a _  -> a
        sameNont ((v1,_),_,_) ((v2,_),_,_) =  getNont v1 == getNont v2
        procCycle ((v1,v2),p1,p2) = ((getAttr v1, getAttr v2), showPathNice ruleTable p1, showPathNice ruleTable p2)
        wrapGroup gr@(((v1,_),_,_):_) = DirectCirc (getNont v1) o_visit (map procCycle gr)
    in  map wrapGroup (groupBy sameNont xs)

inducedCycleErrs :: Table NTAttr -> Table CRule -> CInterfaceMap -> [EdgeRoutes] -> [Error]
inducedCycleErrs attrTable ruleTable cim xs
  = let getNont v = case attrTable ! v of
                      NTASyn nt _ _ -> nt
                      NTAInh nt _ _ -> nt
        getAttr v = case attrTable ! v of
                      NTASyn _ a _  -> a
                      NTAInh _ a _  -> a
        sameNont ((v1,_),_,_) ((v2,_),_,_) =  getNont v1 == getNont v2
        procCycle ((v1,v2),p1,p2) = ((getAttr v1, getAttr v2), showPathNice ruleTable p1, showPathNice ruleTable p2)
        wrapGroup gr@(((v1,_),_,_):_) = InducedCirc (getNont v1) (findWithErr1 "inducedCycleErr.cinter" (getNont v1) cim) (map procCycle gr)
    in  map wrapGroup (groupBy sameNont xs)
}
