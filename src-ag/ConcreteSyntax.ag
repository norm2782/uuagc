imports
{
import UU.Scanner.Position (Pos)
import Patterns   (Pattern)
import Expression (Expression)
import CommonTypes
}


TYPE Elems     = [Elem]

TYPE Alts      = [Alt]

TYPE SemAlts   = [SemAlt]

TYPE SemDefs   = [SemDef]

DATA AG        | AG     elems  : Elems

DATA Elem      | Data   pos    : {Pos}
                        names  : NontSet
                        attrs  : Attrs
                        alts   : Alts
                        ext    : {Bool}

               | Type   pos    : {Pos}
                        name   : {NontermIdent}
                        type   : {ComplexType}

               | Attr   pos    : {Pos}
                        names  : NontSet
                        attrs  : Attrs

               | Sem    pos    : {Pos}
                        names  : NontSet
                        attrs  : Attrs
                        alts   : SemAlts

               | Txt    pos    : {Pos}
                        name   : {NontermIdent}
                        lines  : {[String]}

               | Set    pos    : {Pos}
                        name   : {NontermIdent}
                        set    : NontSet

               | Deriving pos  : {Pos}
                          set  : NontSet
                          classes : {[NontermIdent]}
                          
               | Wrapper  pos  : {Pos}
                          set  : NontSet

               | Pragma   pos  : {Pos}
                          names: {[NontermIdent]}

               | Module   pos     : {Pos}
                          name    : {String}  -- name of the haskell module
                          exports : {String}  -- exports of the haskell module
                          imports : {String}  -- imports to replicate to generated haskell modules

DATA Attrs     | Attrs  pos    : {Pos}
                        inh,chn,syn : {AttrNames}

DATA Alt       | Alt    pos    : {Pos}
                        names  : ConstructorSet
                        fields : {Fields}

DATA SemAlt    | SemAlt pos    : {Pos} 
                        constructorSet   : ConstructorSet
                        rules  : SemDefs

DATA SemDef    | Def    pattern: Pattern
                        rhs    : {Expression}
                        owrt   : {Bool}
               | TypeDef ident : {Identifier}
                         tp    : Type
               | SemPragma  names : {[NontermIdent]}
               | AttrOrderBefore  before : {(Identifier,Identifier)}
                                  after  : {(Identifier,Identifier)}

DATA ConstructorSet | CName       name      : {ConstructorIdent}
                    | CUnion      set1,set2 : ConstructorSet
                    | CDifference set1,set2 : ConstructorSet
                    | CAll  

DATA NontSet   | NamedSet   name      : {NontermIdent}
               | All  
               | Union      set1,set2 : NontSet
               | Intersect  set1,set2 : NontSet
               | Difference set1,set2 : NontSet
               | Path       from,to   : {NontermIdent}
               
