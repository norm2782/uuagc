imports
{
-- AbstractSyntax.ag imports
import Data.Set(Set)
import Data.Map(Map)
import Patterns    (Pattern(..),Patterns)
import Expression  (Expression(..))
import CommonTypes
}

DATA Grammar      | Grammar typeSyns : {TypeSyns}
                            useMap   : {UseMap}
                            derivings: {Derivings}
                            wrappers : {Set NontermIdent}
                            nonts    : Nonterminals
                            pragmas  : {PragmaMap}     -- pragmas defined at a certain alternative
                            manualAttrOrderMap : {AttrOrderMap}  -- manually enforced dependencies between attributes
                            paramMap : {ParamMap}

TYPE Nonterminals = [Nonterminal]

TYPE Productions  = [Production]

TYPE Children     = [Child]

TYPE Rules        = [Rule]

TYPE TypeSigs     = [TypeSig]

DATA Nonterminal  | Nonterminal nt     : {NontermIdent}
                                params : {[Identifier]}
                                inh    : {Attributes}
                                syn    : {Attributes}
                                prods  : Productions

DATA Production  | Production   con      : {ConstructorIdent}
                                children : Children
                                rules    : Rules
                                typeSigs : TypeSigs

DATA Child        | Child   name        : {Identifier}
                            tp          : {Type}
                            inh         : {Attributes}
                            syn         : {Attributes}
                            higherOrder : {Bool}

DATA Rule         | Rule    pattern : Pattern 
                            rhs     : Expression
                            owrt    : {Bool}
                            origin  : String  -- just for documentation (and maybe errors)

DATA TypeSig      | TypeSig name : {Identifier}
                            tp   : {Type}

SET AllAbstractSyntax
  = Grammar
    Nonterminal Nonterminals
    Production Productions
    Child Children
    Rule Rules
    TypeSig TypeSigs
