INCLUDE "Code.ag"
INCLUDE "Patterns.ag"

imports
{
import Char (isAlphaNum)
import UU.Pretty
import Code
import Patterns
import Options
import CommonTypes (attrname, _LOC, getName, nullIdent)
import Data.List(intersperse)
}

{
type PP_Docs = [PP_Doc]
}

{
ppMultiSeqH :: [PP_Doc] -> PP_Doc -> PP_Doc
ppMultiSeqH = ppMultiSeq' (>#<)

ppMultiSeqV :: [PP_Doc] -> PP_Doc -> PP_Doc
ppMultiSeqV = ppMultiSeq' (>-<)

ppMultiSeq' :: (PP_Doc -> PP_Doc -> PP_Doc) -> [PP_Doc] -> PP_Doc -> PP_Doc
ppMultiSeq' next strictArgs expr
  = foldr (\v r -> (v >#< "`seq`") `next` pp_parens r) expr strictArgs
}

ATTR Program                            [ options:{Options} | | output:{PP_Docs} ]

ATTR Expr Exprs Decl Decls Chunk Chunks CaseAlts CaseAlt Lhs Pattern Patterns [ options:{Options} | | ]

ATTR Expr Decl DataAlt Type Lhs         [ nested:{Bool} | | pp:{PP_Doc} ]

ATTR Exprs DataAlts Types  Decls Chunk Chunks [ nested:{Bool} | | pps : {PP_Docs} ]

ATTR CaseAlt CaseAlts                   [ nested:{Bool} | | pps: {PP_Docs} ]

SEM Program
  | Program chunks.nested = nest @lhs.options 

SEM Exprs
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM CaseAlts
  | Cons lhs.pps = @hd.pps ++ @tl.pps
  | Nil  lhs.pps = []

SEM DataAlts
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Types
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Decls
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Chunks
  | Cons lhs.pps = @hd.pps ++ @tl.pps
  | Nil  lhs.pps = []


SEM Program
  | Program    lhs.output  = @chunks.pps

SEM Chunk
  | Chunk      lhs.pps     =  @comment.pp
                              :  @info.pps
                              ++ @dataDef.pps
                              ++ @cataFun.pps
                              ++ @semDom.pps
                              ++ @semWrapper.pps
                              ++ @semFunctions.pps

SEM Decl
  | Decl       lhs.pp      = @left.pp >#< "="
                             >-< indent 4 @rhs.pp
  | Data       lhs.pp      = "data" >#< @name 
                             >#<  ( case @alts.pps of
                                          [] -> empty
                                          (x:xs) ->              "=" >#<  x
                                                 >-< vlist (map ("|" >#<) xs)
                                     >-< if null @derivings
                                            then empty
                                            else "deriving" >#< ppTuple False (map text @derivings)  
                                  )                                            
  | NewType    lhs.pp      = "newtype" >#< @name >#< "=" >#< @con >#< pp_parens @tp.pp
  | Type       lhs.pp      = "type" >#< @name >#< "=" >#<  @tp.pp
  | TSig       lhs.pp      = @name >#< "::" >#< @tp.pp
  | Comment    lhs.pp      = if '\n' `elem` @txt
                               then "{-" >-< vlist (lines @txt) >-< "-}"
                               else "--" >#< @txt
  | PragmaDecl lhs.pp      = "{-#" >#< text @txt >#< "#-}"

SEM Expr
  | Let        lhs.pp      = pp_parens (    "let" >#< (vlist @decls.pps)
                                       >-< "in " >#< @body.pp
                                       )
  | Case       lhs.pp      = pp_parens (    "case" >#< pp_parens @expr.pp >#< "of"
                                       >-< (vlist @alts.pps)
                                       )
  | Lambda     loc.strictParams = if strictSems @lhs.options
                                  then map text @args
                                  else []
               loc.addBang = if bangpats @lhs.options
                             then \p -> pp_parens ("!" >|< p)
                             else id
               lhs.pp      = pp_parens (    "\\" >#< (vlist (map (@loc.addBang . pp) @args)) >#< "->" 
                                       >-< indent 4 (@loc.strictParams `ppMultiSeqV` @body.pp)
                                       )
  | TupleExpr  lhs.pp      = ppTuple @lhs.nested @exprs.pps
  | UnboxedTupleExpr  lhs.pp      = ppUnboxedTuple @lhs.nested @exprs.pps
  | App        lhs.pp      = pp_parens $ @name >#< hv_sp @args.pps
  | SimpleExpr lhs.pp      = text @txt
  | TextExpr   lhs.pp      = vlist (map text @lns)
  | Trace      lhs.pp      = "trace" >#< (   pp_parens ("\"" >|< text @txt >|< "\"")
                                         >-< pp_parens @expr.pp
                                         )
  | PragmaExpr lhs.pp      = "{-#" >#< @txt >#< "#-}" >#< @expr.pp

SEM CaseAlt
  | CaseAlt    lhs.pps     = ["{" >#< @left.pp >#< "->", @expr.pp >#< "}"]

SEM DataAlt
  | DataAlt    lhs.pp      = @name >#< hv_sp (map ((@lhs.strictPre >|<) . pp_parens . text) @args)
  | Record     lhs.pp      = @name >#< pp_block "{" "}" "," 
                                                [ f >#< "::" >#< t | (f,t) <- @args ]
SEM Lhs
  | Pattern3 TupleLhs UnboxedTupleLhs
      loc.addStrictGuard = if strictCases @lhs.options then \v -> v >#< "|" >#< @loc.strictGuard else id
  | Pattern3
      loc.strictGuard = @pat3.strictVars `ppMultiSeqH` (pp "True")
  | TupleLhs UnboxedTupleLhs
      loc.strictGuard = if stricterCases @lhs.options && not @lhs.isDeclOfLet
                        then map text @comps `ppMultiSeqH` (pp "True")
                        else pp "True"

  | Fun
      loc.addStrictGuard = if strictSems @lhs.options then \v -> v >#< "|" >#< @loc.strictGuard else id
      loc.strictGuard    = @args.pps `ppMultiSeqH` (pp "True")

  | TupleLhs UnboxedTupleLhs Fun
      loc.addBang = if bangpats @lhs.options
                             then \p -> "!" >|< p
                             else id

  | Pattern3   lhs.pp      = @loc.addStrictGuard @pat3.pp
  | Pattern3SM lhs.pp      = @pat3.pp'
  | TupleLhs   lhs.pp      = @loc.addStrictGuard $ ppTuple @lhs.nested (map (@loc.addBang . text) @comps)
  | UnboxedTupleLhs   lhs.pp      = @loc.addStrictGuard $ ppUnboxedTuple @lhs.nested (map (@loc.addBang . text) @comps)
  | Fun        lhs.pp      = @loc.addStrictGuard (@name >#< hv_sp (map @loc.addBang @args.pps))

SEM Type  [ | | prec:Int ]
  | Arr        lhs.prec    = 2
                  .pp      = @loc.l >#< "->" >-< @loc.r
               loc.l       = if @left.prec  <= 2 then pp_parens @left.pp  else @left.pp
                  .r       = if @right.prec <  2 then pp_parens @right.pp else @right.pp

  | TupleType  lhs.prec    = 5
                  .pp      = ppTuple @lhs.nested @tps.pps

  | UnboxedTupleType  lhs.prec    = 5
                         .pp      = ppUnboxedTuple @lhs.nested @tps.pps

  | List       lhs.prec    = 5
                  .pp      = "[" >|< @tp.pp >|< "]"

  | SimpleType lhs.prec    = 5
                  .pp      = if reallySimple @txt then text @txt else pp_parens (text @txt)

{

reallySimple :: String -> Bool
reallySimple = and . map (\x -> isAlphaNum x || x=='_')

ppTuple True  pps = "(" >|< pp_block " " (replicate (length pps `max` 1) ')') ",(" pps
ppTuple False pps = "(" >|< pp_block " " ")" "," pps
ppUnboxedTuple True pps  = "(# " >|< pp_block " " (concat $ replicate (length pps `max` 1) " #)") ",(# " pps
ppUnboxedTuple False pps = "(# " >|< pp_block " " " #)" "," pps

}


-------------------------------------------------------------------------------
--         Strict data fields
-------------------------------------------------------------------------------

ATTR DataAlt DataAlts [ strictPre: PP_Doc | | ]

SEM Decl
  | Data alts.strictPre = if @strict then pp "!" else empty

-------------------------------------------------------------------------------
--         Strict variables
-------------------------------------------------------------------------------

ATTR Pattern Patterns [ | | strictVars USE {++} {[]} : {[PP_Doc]} ]
SEM Pattern
  | Alias
      loc.strictVar
        = if strictCases @lhs.options && not @lhs.isDeclOfLet
          then [@loc.ppVar]
          else []
      loc.strictPatVars
        = if stricterCases @lhs.options && not @lhs.isDeclOfLet
          then @pat.strictVars
          else []
      lhs.strictVars
        = @loc.strictVar ++ @loc.strictPatVars
      

-------------------------------------------------------------------------------
--         Pretty printing patterns
-------------------------------------------------------------------------------

SEM Patterns [ | | pps : {[PP_Doc]} ]
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Pattern
  | Constr Product Alias
      loc.addBang = if bangpats @lhs.options && not @lhs.isDeclOfLet
                    then \p -> "!" >|< p
                    else id

SEM Pattern [ | | pp:PP_Doc ]
  | Constr  lhs.pp     = @loc.addBang $ pp_parens $ @name >#< hv_sp @pats.pps
  | Product lhs.pp     = @loc.addBang $ pp_block "(" ")" "," @pats.pps
  | Alias   loc.ppVar  = @loc.addBang $ pp (attrname False @field @attr)
            lhs.pp     = if @pat.isUnderscore
                          then @loc.ppVar
                          else @loc.ppVar >|< "@" >|< @pat.pp
  | Underscore lhs.pp  = text "_"

SEM Pattern [ | | isUnderscore:{Bool}]
 | Constr     lhs.isUnderscore = False
 | Product    lhs.isUnderscore = False
 | Alias      lhs.isUnderscore = False
 | Underscore lhs.isUnderscore = True

-------------------------------------------------------------------------------
--         Pretty printing patterns for SM
-------------------------------------------------------------------------------

SEM Patterns [ | | pps' : {[PP_Doc]} ]
  | Cons lhs.pps' = @hd.pp' : @tl.pps'
  | Nil  lhs.pps' = []

SEM Pattern [ | | pp':PP_Doc ]
  | Constr  lhs.pp'     = pp_parens $ @name >#< hv_sp (map pp_parens @pats.pps')
  | Product lhs.pp'     = pp_block "(" ")" "," @pats.pps'
  | Alias   lhs.pp'     = let attribute | @field == _LOC || @field == nullIdent = locname' @attr
                                        | otherwise                             = attrname False @field @attr
                          in attribute >|< "@" >|< @pat.pp'
  | Underscore lhs.pp'  = text "_"

{
locname' n = "_loc_" ++ getName n
}

-------------------------------------------------------------------------------
--         Determine if inside a Let
-------------------------------------------------------------------------------

ATTR Chunks Chunk Decls Decl Lhs Pattern Patterns [ isDeclOfLet : Bool | | ]
SEM Program
  | Program
      chunks.isDeclOfLet = False

SEM Expr
  | Let
      decls.isDeclOfLet = True

SEM CaseAlt
  | CaseAlt
      left.isDeclOfLet = False



-------------------------------------------------------------------------------
--         Alternative code printing to separate modules
-------------------------------------------------------------------------------

ATTR Program [ | | genIO : {IO ()} ]
ATTR Program Chunks Chunk
  [ importBlocks : String
    pragmaBlocks : String
    textBlocks : String
    optionsLine : String
    mainFile : String
    mainName : String
    moduleHeader : {String -> String -> String -> Bool -> String}
     | | ]

SEM Program
  | Program
      loc.genMainModule
        = do let outputfile = @lhs.mainFile ++ ".hs"
             writeFile  outputfile @lhs.pragmaBlocks
             appendFile outputfile @lhs.optionsLine
             appendFile outputfile $ @lhs.moduleHeader @lhs.mainName "" "" False
             appendFile outputfile ("import " ++ @lhs.mainName ++ "_common\n")
             mapM_ (appendFile outputfile) @chunks.imports
             mapM_ (appendFile outputfile . renderDocs) @chunks.appendMain
             return ()
      loc.genCommonModule
        = do let outputfile = @lhs.mainFile ++ "_common.hs"
             writeFile  outputfile @lhs.pragmaBlocks
             appendFile outputfile @lhs.optionsLine
             appendFile outputfile $ @lhs.moduleHeader @lhs.mainName "_common" "" True
             appendFile outputfile @lhs.importBlocks
             appendFile outputfile @lhs.textBlocks
             mapM_ (appendFile outputfile . renderDocs) @chunks.appendCommon
             return ()
      lhs.genIO = do @loc.genMainModule
                     @loc.genCommonModule
                     @chunks.genSems

{
renderDocs :: [UU.Pretty.PP_Doc] -> String
renderDocs pps = foldr (.) id (map (\d -> (UU.Pretty.disp d 50000) . ( '\n':) ) pps) ""
}

ATTR Chunk Chunks [ | | imports USE {++} {[]} : {[String]} ]
SEM Chunk
  | Chunk
      lhs.imports = ["import " ++ @lhs.mainName ++ "_" ++ @name ++ "\n"]

ATTR Chunk Chunks [ | | appendCommon, appendMain USE {++} {[]} : {[[PP_Doc]]} ]

SEM Chunk
  | Chunk
      lhs.appendCommon
        = [ [@comment.pp]
          , @dataDef.pps
          , @semDom.pps
          ]
      lhs.appendMain
        = [ [@comment.pp]
          , @cataFun.pps
          , @semWrapper.pps
          ]

ATTR Chunk Chunks [ | | genSems USE {>>} {return ()} : {IO ()} ]

SEM Chunk
  | Chunk
      lhs.genSems
        = do let outputfile = @lhs.mainFile ++ "_" ++ @name ++ ".hs"
             writeFile  outputfile @lhs.pragmaBlocks
             appendFile outputfile @lhs.optionsLine
             appendFile outputfile $ @lhs.moduleHeader @lhs.mainName ("_" ++ @name) @loc.exports True
             appendFile outputfile ("import " ++ @lhs.mainName ++ "_common\n")
             appendFile outputfile $ renderDocs $ [@comment.pp]
             appendFile outputfile $ renderDocs $ @info.pps
             appendFile outputfile $ renderDocs $ @semFunctions.pps
             return ()

SEM Chunk
  | Chunk
      loc.exports = concat $ intersperse "," @semNames

