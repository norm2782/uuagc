imports
{
import Patterns
import CommonTypes
import UU.DData.Map(Map)
import UU.DData.Set(Set)
}

DATA  CGrammar 
   |  CGrammar  typeSyns  : {TypeSyns}
                derivings : {Derivings} 
                wrappers  : {Set Nonterminal} 
                prods     : CProductions
                pragmas   : {PragmaMap}

TYPE CProductions = [CProduction]

DATA  CProduction 
   |  CProduction  nt     :  Nonterminal
                   inh    :  Attributes
                   syn    :  Attributes
                   alts   :  CAlternatives
                   inter  :  CInterface

DATA  CInterface
   |  CInterface seg:CSegments

TYPE CSegments = [CSegment]

DATA  CSegment
   |  CSegment  inh  :  Attributes
                syn  :  Attributes

TYPE CAlternatives = [CAlternative]

DATA  CAlternative
   |  CAlternative  con        : Constructor
                    visits     : CVisits
                    children   : {[(Name,Type,Bool)]}
                    terminals  : {[Name]}

TYPE CVisits = [CVisit]

DATA  CVisit 
   |  CVisit  inh     :  Attributes
              syn     :  Attributes
              vss     :  Sequence  -- sequence of "steps", where each "step" is either an attribute definition or a child visit
              intra   :  Sequence  -- how to glue the visits together (child visits are child-intra's, attr-defs are attr-intra's)
              ordered :  Bool -- indicates that vss is ordered

TYPE Sequence = [CRule]

DATA  CRule
   |  CRule        name       :  Name
                   isIn       :  Bool   -- True iff there is a definition for an inherited attribute
                   hasCode    :  Bool   -- True iff there is an RHS
                   nt         :  Nonterminal
                   con        :  Constructor
                   field      :  Name
                   childnt    :  {Maybe Nonterminal}  -- Just n: 'field' of 'nt' and 'con' is a nonterminal 'n', Nothing: it is a terminal
                   tp         :  {Maybe Type}     -- type of the attribute
                   pattern    :  Pattern     -- only defined if 'isIn' is False
                   rhs        :  {[String]}     -- empty string if 'hasCode' is False
                   defines    :  {Map Int (Name,Name,Maybe Type)}   -- the attributes defined by this rule
                   owrt       :  {Bool}
                   origin     :  String  -- just for documentation (and maybe errors)
   |  CChildVisit  name    :  Name  -- corresponding to the name of the child
                   nt      :  Nonterminal
                   nr      :  Int   -- visit number
                   inh     :  Attributes
                   syn     :  Attributes
                   last    :  Bool  -- indicates whether this is the last visit to this child


SET AllCodeSyntax
  = CGrammar
    CProduction CProductions
    CInterface CSegments CSegment
    CAlternative CAlternatives
    CVisits CVisit
    CRule
